
Sasho Qvko Radko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b10  08003b10  00004b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  0000507c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b9c  08003b9c  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003ba4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000007c  08003c20  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003c20  000052a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b744  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00012378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078b  00000000  00000000  00012d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cea  00000000  00000000  000134f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c434  00000000  00000000  000391dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb76e  00000000  00000000  00045611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f04  00000000  00000000  00130dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00133cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003af8 	.word	0x08003af8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08003af8 	.word	0x08003af8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fbf6 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f83a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f884 	bl	80006c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fa3b 	bl	8000a3c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fa99 	bl	8000b00 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <main+0x74>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <main+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <main+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <main+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <main+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <main+0x74>)
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fb05 	bl	8000c00 <BSP_COM_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <main+0x50>
  {
    Error_Handler();
 80005fc:	f000 f8de 	bl	80007bc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <main+0x78>)
 8000602:	f002 fc0b 	bl	8002e1c <iprintf>

  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fa4e 	bl	8000aa8 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <main+0x7c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d1fb      	bne.n	800060c <main+0x5c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <main+0x7c>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fa5a 	bl	8000ad4 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000620:	e7f4      	b.n	800060c <main+0x5c>
 8000622:	bf00      	nop
 8000624:	20000098 	.word	0x20000098
 8000628:	08003b10 	.word	0x08003b10
 800062c:	200000a8 	.word	0x200000a8

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2238      	movs	r2, #56	@ 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fc41 	bl	8002ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 ff3a 	bl	80014cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000672:	2355      	movs	r3, #85	@ 0x55
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffd4 	bl	8001634 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000692:	f000 f893 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fad2 	bl	8001c58 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ba:	f000 f87f 	bl	80007bc <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	4a2a      	ldr	r2, [pc, #168]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a24      	ldr	r2, [pc, #144]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <MX_GPIO_Init+0xc4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000746:	f000 fe8f 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_GPIO_Init+0xc8>)
 8000760:	f000 fd00 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077e:	f000 fcf1 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BSP_PB_Callback+0x24>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000a8 	.word	0x200000a8

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007fe:	f000 ff09 	bl	8001614 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <UsageFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 faef 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f9b2 	bl	8000bdc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e00a      	b.n	80008a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088e:	f3af 8000 	nop.w
 8000892:	4601      	mov	r1, r0
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	60ba      	str	r2, [r7, #8]
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf0      	blt.n	800088e <_read+0x12>
  }

  return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e009      	b.n	80008dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f9f7 	bl	8000cc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	3301      	adds	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbf1      	blt.n	80008c8 <_write+0x12>
  }
  return len;
 80008e4:	687b      	ldr	r3, [r7, #4]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_close>:

int _close(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000916:	605a      	str	r2, [r3, #4]
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_isatty>:

int _isatty(int file)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f002 faec 	bl	8002f64 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20020000 	.word	0x20020000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200000ac 	.word	0x200000ac
 80009c0:	200002a0 	.word	0x200002a0

080009c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	@ (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	@ (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 faab 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fdc9 	bl	80005b0 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a2c:	08003ba4 	.word	0x08003ba4
  ldr r2, =_sbss
 8000a30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a34:	200002a0 	.word	0x200002a0

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <BSP_LED_Init+0x64>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <BSP_LED_Init+0x64>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <BSP_LED_Init+0x64>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000a5e:	2320      	movs	r3, #32
 8000a60:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <BSP_LED_Init+0x68>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	f107 020c 	add.w	r2, r7, #12
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fb71 	bl	8001164 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <BSP_LED_Init+0x68>)
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fcea 	bl	8001468 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <BSP_LED_On+0x28>)
 8000ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aba:	2120      	movs	r1, #32
 8000abc:	2201      	movs	r2, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fcd2 	bl	8001468 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <BSP_LED_Toggle+0x28>)
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fcd4 	bl	8001498 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000004 	.word	0x20000004

08000b00 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000b10:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <BSP_PB_Init+0xc4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b14:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc4 <BSP_PB_Init+0xc4>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1c:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <BSP_PB_Init+0xc4>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10c      	bne.n	8000b56 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <BSP_PB_Init+0xc8>)
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	f107 020c 	add.w	r2, r7, #12
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fb08 	bl	8001164 <HAL_GPIO_Init>
 8000b54:	e031      	b.n	8000bba <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc8 <BSP_PB_Init+0xc8>)
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	f107 020c 	add.w	r2, r7, #12
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fafa 	bl	8001164 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <BSP_PB_Init+0xcc>)
 8000b76:	441a      	add	r2, r3
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4915      	ldr	r1, [pc, #84]	@ (8000bd0 <BSP_PB_Init+0xd0>)
 8000b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f000 faaa 	bl	80010dc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <BSP_PB_Init+0xcc>)
 8000b8e:	1898      	adds	r0, r3, r2
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <BSP_PB_Init+0xd4>)
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f000 fa81 	bl	80010a2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ba0:	2028      	movs	r0, #40	@ 0x28
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <BSP_PB_Init+0xd8>)
 8000ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	f000 fa44 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000bb2:	2328      	movs	r3, #40	@ 0x28
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fa5a 	bl	800106e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000b0 	.word	0x200000b0
 8000bd0:	08003b44 	.word	0x08003b44
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	20000014 	.word	0x20000014

08000bdc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <BSP_PB_IRQHandler+0x20>)
 8000bec:	4413      	add	r3, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fa88 	bl	8001104 <HAL_EXTI_IRQHandler>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000b0 	.word	0x200000b0

08000c00 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d903      	bls.n	8000c1e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c16:	f06f 0301 	mvn.w	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e018      	b.n	8000c50 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2294      	movs	r2, #148	@ 0x94
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <BSP_COM_Init+0x5c>)
 8000c28:	4413      	add	r3, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f86e 	bl	8000d0c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2294      	movs	r2, #148	@ 0x94
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <BSP_COM_Init+0x5c>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f80e 	bl	8000c60 <MX_LPUART1_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000c4a:	f06f 0303 	mvn.w	r3, #3
 8000c4e:	e000      	b.n	8000c52 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000b8 	.word	0x200000b8

08000c60 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <MX_LPUART1_Init+0x60>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	895b      	ldrh	r3, [r3, #10]
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	891b      	ldrh	r3, [r3, #8]
 8000c96:	461a      	mov	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	899b      	ldrh	r3, [r3, #12]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cac:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f001 f9ee 	bl	8002090 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000000c 	.word	0x2000000c

08000cc4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <__io_putchar+0x30>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2394      	movs	r3, #148	@ 0x94
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <__io_putchar+0x34>)
 8000cda:	1898      	adds	r0, r3, r2
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f001 fa2e 	bl	8002144 <HAL_UART_Transmit>
  return ch;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000014c 	.word	0x2000014c
 8000cf8:	200000b8 	.word	0x200000b8

08000cfc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fd47 	bl	8000794 <BSP_PB_Callback>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d48:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <COM1_MspInit+0x94>)
 8000d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7a:	f000 f9f3 	bl	8001164 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d86:	230c      	movs	r3, #12
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f000 f9e6 	bl	8001164 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 f938 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 f80d 	bl	8000dd4 <HAL_InitTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	e001      	b.n	8000dca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc6:	f7ff fcff 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dca:	79fb      	ldrb	r3, [r7, #7]

}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_InitTick+0x68>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d022      	beq.n	8000e2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_InitTick+0x6c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_InitTick+0x68>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f944 	bl	800108a <HAL_SYSTICK_Config>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10f      	bne.n	8000e28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	d809      	bhi.n	8000e22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	f04f 30ff 	mov.w	r0, #4294967295
 8000e16:	f000 f910 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <HAL_InitTick+0x70>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e004      	b.n	8000e32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e001      	b.n	8000e32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000001c 	.word	0x2000001c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000018 	.word	0x20000018

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a03      	ldr	r2, [pc, #12]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000150 	.word	0x20000150
 8000e68:	2000001c 	.word	0x2000001c

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000150 	.word	0x20000150

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	@ (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	@ 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff40 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff33 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa4 	bl	8000fe0 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	460b      	mov	r3, r1
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	605a      	str	r2, [r3, #4]
      break;
 80010c0:	e005      	b.n	80010ce <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75fb      	strb	r3, [r7, #23]
      break;
 80010cc:	bf00      	nop
  }

  return status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e003      	b.n	80010f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2201      	movs	r2, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	015a      	lsls	r2, r3, #5
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_EXTI_IRQHandler+0x5c>)
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4798      	blx	r3
    }
  }
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010414 	.word	0x40010414

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001172:	e15a      	b.n	800142a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 814c 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f0:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131a:	d01f      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d019      	beq.n	8001358 <HAL_GPIO_Init+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e4>
 8001344:	2305      	movs	r3, #5
 8001346:	e00a      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001348:	2306      	movs	r3, #6
 800134a:	e008      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800134c:	2304      	movs	r3, #4
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001350:	2303      	movs	r3, #3
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136e:	4937      	ldr	r1, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a30      	ldr	r2, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x300>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f ae9d 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48000c00 	.word	0x48000c00
 800145c:	48001000 	.word	0x48001000
 8001460:	48001400 	.word	0x48001400
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43d9      	mvns	r1, r3
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	400b      	ands	r3, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d141      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014da:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e6:	d131      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e8:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ee:	4a46      	ldr	r2, [pc, #280]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	4b43      	ldr	r3, [pc, #268]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001500:	4a41      	ldr	r2, [pc, #260]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001506:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001508:	4b40      	ldr	r3, [pc, #256]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2232      	movs	r2, #50	@ 0x32
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a3f      	ldr	r2, [pc, #252]	@ (8001610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151e:	e002      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3b01      	subs	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001532:	d102      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f2      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153a:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001546:	d158      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e057      	b.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001552:	4a2d      	ldr	r2, [pc, #180]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800155c:	e04d      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001564:	d141      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800156e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001572:	d131      	bne.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800157a:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800158c:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001592:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2232      	movs	r2, #50	@ 0x32
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015aa:	e002      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015be:	d102      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f2      	bne.n	80015ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d2:	d112      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e011      	b.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015e8:	e007      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40007000 	.word	0x40007000
 800160c:	20000000 	.word	0x20000000
 8001610:	431bde83 	.word	0x431bde83

08001614 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800161e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001622:	6093      	str	r3, [r2, #8]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40007000 	.word	0x40007000

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e2fe      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b97      	ldr	r3, [pc, #604]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b94      	ldr	r3, [pc, #592]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x3e>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d002      	beq.n	8001678 <HAL_RCC_OscConfig+0x44>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d10b      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4b8d      	ldr	r3, [pc, #564]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d157      	bne.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e2d9      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x74>
 800169a:	4b85      	ldr	r3, [pc, #532]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a84      	ldr	r2, [pc, #528]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b7f      	ldr	r3, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7e      	ldr	r2, [pc, #504]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7b      	ldr	r2, [pc, #492]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016cc:	4b78      	ldr	r3, [pc, #480]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a77      	ldr	r2, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b75      	ldr	r3, [pc, #468]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a74      	ldr	r2, [pc, #464]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fbbe 	bl	8000e6c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbba 	bl	8000e6c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e29e      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fbaa 	bl	8000e6c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fba6 	bl	8000e6c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e28a      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	4b60      	ldr	r3, [pc, #384]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d075      	beq.n	8001836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174a:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001754:	4b56      	ldr	r3, [pc, #344]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d102      	bne.n	800176a <HAL_RCC_OscConfig+0x136>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d002      	beq.n	8001770 <HAL_RCC_OscConfig+0x13c>
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d11f      	bne.n	80017b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	4b4f      	ldr	r3, [pc, #316]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x154>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e25d      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4946      	ldr	r1, [pc, #280]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800179c:	4b45      	ldr	r3, [pc, #276]	@ (80018b4 <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fb17 	bl	8000dd4 <HAL_InitTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d043      	beq.n	8001834 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e249      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a3c      	ldr	r2, [pc, #240]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb52 	bl	8000e6c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb4e 	bl	8000e6c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e232      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017de:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	061b      	lsls	r3, r3, #24
 80017f8:	492d      	ldr	r1, [pc, #180]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e01a      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001806:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb2e 	bl	8000e6c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fb2a 	bl	8000e6c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e20e      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001826:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1e0>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d041      	beq.n	80018c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01c      	beq.n	8001884 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fb07 	bl	8000e6c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fb03 	bl	8000e6c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1e7      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ef      	beq.n	8001862 <HAL_RCC_OscConfig+0x22e>
 8001882:	e020      	b.n	80018c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188a:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_RCC_OscConfig+0x27c>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff faea 	bl	8000e6c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189a:	e00d      	b.n	80018b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fae6 	bl	8000e6c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d906      	bls.n	80018b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1ca      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b8:	4b8c      	ldr	r3, [pc, #560]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ea      	bne.n	800189c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a6 	beq.w	8001a20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018d8:	4b84      	ldr	r3, [pc, #528]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2b4>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x2b6>
 80018e8:	2300      	movs	r3, #0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00d      	beq.n	800190a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	4a7e      	ldr	r2, [pc, #504]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190a:	4b79      	ldr	r3, [pc, #484]	@ (8001af0 <HAL_RCC_OscConfig+0x4bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001916:	4b76      	ldr	r3, [pc, #472]	@ (8001af0 <HAL_RCC_OscConfig+0x4bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a75      	ldr	r2, [pc, #468]	@ (8001af0 <HAL_RCC_OscConfig+0x4bc>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff faa3 	bl	8000e6c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7ff fa9f 	bl	8000e6c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e183      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193c:	4b6c      	ldr	r3, [pc, #432]	@ (8001af0 <HAL_RCC_OscConfig+0x4bc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_RCC_OscConfig+0x32e>
 8001950:	4b66      	ldr	r3, [pc, #408]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a65      	ldr	r2, [pc, #404]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001960:	e024      	b.n	80019ac <HAL_RCC_OscConfig+0x378>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d110      	bne.n	800198c <HAL_RCC_OscConfig+0x358>
 800196a:	4b60      	ldr	r3, [pc, #384]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 800196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001970:	4a5e      	ldr	r2, [pc, #376]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800197a:	4b5c      	ldr	r3, [pc, #368]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001980:	4a5a      	ldr	r2, [pc, #360]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x378>
 800198c:	4b57      	ldr	r3, [pc, #348]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001992:	4a56      	ldr	r2, [pc, #344]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800199c:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d016      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fa5a 	bl	8000e6c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff fa56 	bl	8000e6c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e138      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	4b46      	ldr	r3, [pc, #280]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ed      	beq.n	80019bc <HAL_RCC_OscConfig+0x388>
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa43 	bl	8000e6c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fa3f 	bl	8000e6c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e121      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a00:	4b3a      	ldr	r3, [pc, #232]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ed      	bne.n	80019ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	4a34      	ldr	r2, [pc, #208]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa12 	bl	8000e6c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4c:	f7ff fa0e 	bl	8000e6c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0f2      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x418>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f9f5 	bl	8000e6c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7ff f9f1 	bl	8000e6c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0d5      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80c9 	beq.w	8001c42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	f000 8083 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d15e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <HAL_RCC_OscConfig+0x4b8>)
 8001acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9cb 	bl	8000e6c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	e00c      	b.n	8001af4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9c7 	bl	8000e6c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d905      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0ab      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	4b55      	ldr	r3, [pc, #340]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ec      	bne.n	8001ada <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b52      	ldr	r3, [pc, #328]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b52      	ldr	r3, [pc, #328]	@ (8001c50 <HAL_RCC_OscConfig+0x61c>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6a11      	ldr	r1, [r2, #32]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b10:	3a01      	subs	r2, #1
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b1a:	0212      	lsls	r2, r2, #8
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b22:	0852      	lsrs	r2, r2, #1
 8001b24:	3a01      	subs	r2, #1
 8001b26:	0552      	lsls	r2, r2, #21
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b2e:	0852      	lsrs	r2, r2, #1
 8001b30:	3a01      	subs	r2, #1
 8001b32:	0652      	lsls	r2, r2, #25
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b3a:	06d2      	lsls	r2, r2, #27
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	4943      	ldr	r1, [pc, #268]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b50:	4b3e      	ldr	r3, [pc, #248]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a3d      	ldr	r2, [pc, #244]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f986 	bl	8000e6c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f982 	bl	8000e6c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e066      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x530>
 8001b82:	e05e      	b.n	8001c42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b31      	ldr	r3, [pc, #196]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f96c 	bl	8000e6c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f968 	bl	8000e6c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e04c      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4924      	ldr	r1, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
 8001bc2:	e03e      	b.n	8001c42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e039      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_RCC_OscConfig+0x618>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d12c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d123      	bne.n	8001c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d11b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d113      	bne.n	8001c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	019f800c 	.word	0x019f800c
 8001c54:	feeefffc 	.word	0xfeeefffc

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e11e      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b91      	ldr	r3, [pc, #580]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	498c      	ldr	r1, [pc, #560]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b8a      	ldr	r3, [pc, #552]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e106      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d073      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d129      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb4:	4b81      	ldr	r3, [pc, #516]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0f4      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cc4:	f000 f99e 	bl	8002004 <RCC_GetSysClockFreqFromPLLSource>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a7c      	ldr	r2, [pc, #496]	@ (8001ec0 <HAL_RCC_ClockConfig+0x268>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d93f      	bls.n	8001d52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d033      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d12f      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cf2:	4b72      	ldr	r3, [pc, #456]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cfa:	4a70      	ldr	r2, [pc, #448]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e024      	b.n	8001d52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d10:	4b6a      	ldr	r3, [pc, #424]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0c6      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d20:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0be      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d30:	f000 f8ce 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4a61      	ldr	r2, [pc, #388]	@ (8001ec0 <HAL_RCC_ClockConfig+0x268>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d909      	bls.n	8001d52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d46:	4a5d      	ldr	r2, [pc, #372]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b5a      	ldr	r3, [pc, #360]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4957      	ldr	r1, [pc, #348]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff f882 	bl	8000e6c <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7ff f87e 	bl	8000e6c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e095      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a42      	ldr	r2, [pc, #264]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001db6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4936      	ldr	r1, [pc, #216]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b80      	cmp	r3, #128	@ 0x80
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4a32      	ldr	r2, [pc, #200]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001df8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d21d      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 020f 	bic.w	r2, r3, #15
 8001e10:	4929      	ldr	r1, [pc, #164]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f828 	bl	8000e6c <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f824 	bl	8000e6c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e03b      	b.n	8001eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1ed      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4917      	ldr	r1, [pc, #92]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490f      	ldr	r1, [pc, #60]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e82:	f000 f825 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <HAL_RCC_ClockConfig+0x26c>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_RCC_ClockConfig+0x270>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff94 	bl	8000dd4 <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	04c4b400 	.word	0x04c4b400
 8001ec4:	08003b2c 	.word	0x08003b2c
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000018 	.word	0x20000018

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e047      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e03e      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d136      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f24:	4a1a      	ldr	r2, [pc, #104]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	68d2      	ldr	r2, [r2, #12]
 8001f30:	0a12      	lsrs	r2, r2, #8
 8001f32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
      break;
 8001f3c:	e00c      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3e:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	0a12      	lsrs	r2, r2, #8
 8001f4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      break;
 8001f56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0e5b      	lsrs	r3, r3, #25
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	3301      	adds	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e001      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f78:	693b      	ldr	r3, [r7, #16]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	016e3600 	.word	0x016e3600

08001f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4904      	ldr	r1, [pc, #16]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08003b3c 	.word	0x08003b3c

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fdc:	f7ff ffda 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0adb      	lsrs	r3, r3, #11
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4904      	ldr	r1, [pc, #16]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003b3c 	.word	0x08003b3c

08002004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3301      	adds	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d10c      	bne.n	8002042 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002032:	68d2      	ldr	r2, [r2, #12]
 8002034:	0a12      	lsrs	r2, r2, #8
 8002036:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
    break;
 8002040:	e00c      	b.n	800205c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800204c:	68d2      	ldr	r2, [r2, #12]
 800204e:	0a12      	lsrs	r2, r2, #8
 8002050:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    break;
 800205a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0e5b      	lsrs	r3, r3, #25
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000
 8002088:	016e3600 	.word	0x016e3600
 800208c:	00f42400 	.word	0x00f42400

08002090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f83b 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2224      	movs	r2, #36	@ 0x24
 80020be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fbbc 	bl	8002858 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8bd 	bl	8002260 <UART_SetConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e01b      	b.n	8002128 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800210e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fc3b 	bl	800299c <UART_CheckIdleState>
 8002126:	4603      	mov	r3, r0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	2b20      	cmp	r3, #32
 800215c:	d17b      	bne.n	8002256 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_UART_Transmit+0x26>
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e074      	b.n	8002258 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2221      	movs	r2, #33	@ 0x21
 800217a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800217e:	f7fe fe75 	bl	8000e6c <HAL_GetTick>
 8002182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	88fa      	ldrh	r2, [r7, #6]
 8002188:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219c:	d108      	bne.n	80021b0 <HAL_UART_Transmit+0x6c>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e003      	b.n	80021b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021b8:	e030      	b.n	800221c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fc93 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e03d      	b.n	8002258 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e007      	b.n	800220a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1c8      	bne.n	80021ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2200      	movs	r2, #0
 8002230:	2140      	movs	r1, #64	@ 0x40
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fc5c 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e006      	b.n	8002258 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002264:	b08c      	sub	sp, #48	@ 0x30
 8002266:	af00      	add	r7, sp, #0
 8002268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	431a      	orrs	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	431a      	orrs	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4313      	orrs	r3, r2
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4baa      	ldr	r3, [pc, #680]	@ (8002538 <UART_SetConfig+0x2d8>)
 8002290:	4013      	ands	r3, r2
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002298:	430b      	orrs	r3, r1
 800229a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9f      	ldr	r2, [pc, #636]	@ (800253c <UART_SetConfig+0x2dc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c8:	4313      	orrs	r3, r2
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80022d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	f023 010f 	bic.w	r1, r3, #15
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a90      	ldr	r2, [pc, #576]	@ (8002540 <UART_SetConfig+0x2e0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d125      	bne.n	8002350 <UART_SetConfig+0xf0>
 8002304:	4b8f      	ldr	r3, [pc, #572]	@ (8002544 <UART_SetConfig+0x2e4>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d81a      	bhi.n	8002348 <UART_SetConfig+0xe8>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <UART_SetConfig+0xb8>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	08002339 	.word	0x08002339
 8002320:	08002331 	.word	0x08002331
 8002324:	08002341 	.word	0x08002341
 8002328:	2301      	movs	r3, #1
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800232e:	e116      	b.n	800255e <UART_SetConfig+0x2fe>
 8002330:	2302      	movs	r3, #2
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002336:	e112      	b.n	800255e <UART_SetConfig+0x2fe>
 8002338:	2304      	movs	r3, #4
 800233a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800233e:	e10e      	b.n	800255e <UART_SetConfig+0x2fe>
 8002340:	2308      	movs	r3, #8
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002346:	e10a      	b.n	800255e <UART_SetConfig+0x2fe>
 8002348:	2310      	movs	r3, #16
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800234e:	e106      	b.n	800255e <UART_SetConfig+0x2fe>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7c      	ldr	r2, [pc, #496]	@ (8002548 <UART_SetConfig+0x2e8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d138      	bne.n	80023cc <UART_SetConfig+0x16c>
 800235a:	4b7a      	ldr	r3, [pc, #488]	@ (8002544 <UART_SetConfig+0x2e4>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d82d      	bhi.n	80023c4 <UART_SetConfig+0x164>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <UART_SetConfig+0x110>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023a5 	.word	0x080023a5
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023c5 	.word	0x080023c5
 800237c:	080023c5 	.word	0x080023c5
 8002380:	080023b5 	.word	0x080023b5
 8002384:	080023c5 	.word	0x080023c5
 8002388:	080023c5 	.word	0x080023c5
 800238c:	080023c5 	.word	0x080023c5
 8002390:	080023ad 	.word	0x080023ad
 8002394:	080023c5 	.word	0x080023c5
 8002398:	080023c5 	.word	0x080023c5
 800239c:	080023c5 	.word	0x080023c5
 80023a0:	080023bd 	.word	0x080023bd
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023aa:	e0d8      	b.n	800255e <UART_SetConfig+0x2fe>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023b2:	e0d4      	b.n	800255e <UART_SetConfig+0x2fe>
 80023b4:	2304      	movs	r3, #4
 80023b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ba:	e0d0      	b.n	800255e <UART_SetConfig+0x2fe>
 80023bc:	2308      	movs	r3, #8
 80023be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023c2:	e0cc      	b.n	800255e <UART_SetConfig+0x2fe>
 80023c4:	2310      	movs	r3, #16
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ca:	e0c8      	b.n	800255e <UART_SetConfig+0x2fe>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5e      	ldr	r2, [pc, #376]	@ (800254c <UART_SetConfig+0x2ec>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d125      	bne.n	8002422 <UART_SetConfig+0x1c2>
 80023d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002544 <UART_SetConfig+0x2e4>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023e0:	2b30      	cmp	r3, #48	@ 0x30
 80023e2:	d016      	beq.n	8002412 <UART_SetConfig+0x1b2>
 80023e4:	2b30      	cmp	r3, #48	@ 0x30
 80023e6:	d818      	bhi.n	800241a <UART_SetConfig+0x1ba>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d00a      	beq.n	8002402 <UART_SetConfig+0x1a2>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d814      	bhi.n	800241a <UART_SetConfig+0x1ba>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <UART_SetConfig+0x19a>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d008      	beq.n	800240a <UART_SetConfig+0x1aa>
 80023f8:	e00f      	b.n	800241a <UART_SetConfig+0x1ba>
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002400:	e0ad      	b.n	800255e <UART_SetConfig+0x2fe>
 8002402:	2302      	movs	r3, #2
 8002404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002408:	e0a9      	b.n	800255e <UART_SetConfig+0x2fe>
 800240a:	2304      	movs	r3, #4
 800240c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002410:	e0a5      	b.n	800255e <UART_SetConfig+0x2fe>
 8002412:	2308      	movs	r3, #8
 8002414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002418:	e0a1      	b.n	800255e <UART_SetConfig+0x2fe>
 800241a:	2310      	movs	r3, #16
 800241c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002420:	e09d      	b.n	800255e <UART_SetConfig+0x2fe>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a4a      	ldr	r2, [pc, #296]	@ (8002550 <UART_SetConfig+0x2f0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d125      	bne.n	8002478 <UART_SetConfig+0x218>
 800242c:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <UART_SetConfig+0x2e4>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002436:	2bc0      	cmp	r3, #192	@ 0xc0
 8002438:	d016      	beq.n	8002468 <UART_SetConfig+0x208>
 800243a:	2bc0      	cmp	r3, #192	@ 0xc0
 800243c:	d818      	bhi.n	8002470 <UART_SetConfig+0x210>
 800243e:	2b80      	cmp	r3, #128	@ 0x80
 8002440:	d00a      	beq.n	8002458 <UART_SetConfig+0x1f8>
 8002442:	2b80      	cmp	r3, #128	@ 0x80
 8002444:	d814      	bhi.n	8002470 <UART_SetConfig+0x210>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <UART_SetConfig+0x1f0>
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d008      	beq.n	8002460 <UART_SetConfig+0x200>
 800244e:	e00f      	b.n	8002470 <UART_SetConfig+0x210>
 8002450:	2300      	movs	r3, #0
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002456:	e082      	b.n	800255e <UART_SetConfig+0x2fe>
 8002458:	2302      	movs	r3, #2
 800245a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800245e:	e07e      	b.n	800255e <UART_SetConfig+0x2fe>
 8002460:	2304      	movs	r3, #4
 8002462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002466:	e07a      	b.n	800255e <UART_SetConfig+0x2fe>
 8002468:	2308      	movs	r3, #8
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800246e:	e076      	b.n	800255e <UART_SetConfig+0x2fe>
 8002470:	2310      	movs	r3, #16
 8002472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002476:	e072      	b.n	800255e <UART_SetConfig+0x2fe>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a35      	ldr	r2, [pc, #212]	@ (8002554 <UART_SetConfig+0x2f4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d12a      	bne.n	80024d8 <UART_SetConfig+0x278>
 8002482:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <UART_SetConfig+0x2e4>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800248c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002490:	d01a      	beq.n	80024c8 <UART_SetConfig+0x268>
 8002492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002496:	d81b      	bhi.n	80024d0 <UART_SetConfig+0x270>
 8002498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800249c:	d00c      	beq.n	80024b8 <UART_SetConfig+0x258>
 800249e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024a2:	d815      	bhi.n	80024d0 <UART_SetConfig+0x270>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <UART_SetConfig+0x250>
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ac:	d008      	beq.n	80024c0 <UART_SetConfig+0x260>
 80024ae:	e00f      	b.n	80024d0 <UART_SetConfig+0x270>
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b6:	e052      	b.n	800255e <UART_SetConfig+0x2fe>
 80024b8:	2302      	movs	r3, #2
 80024ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024be:	e04e      	b.n	800255e <UART_SetConfig+0x2fe>
 80024c0:	2304      	movs	r3, #4
 80024c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c6:	e04a      	b.n	800255e <UART_SetConfig+0x2fe>
 80024c8:	2308      	movs	r3, #8
 80024ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ce:	e046      	b.n	800255e <UART_SetConfig+0x2fe>
 80024d0:	2310      	movs	r3, #16
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024d6:	e042      	b.n	800255e <UART_SetConfig+0x2fe>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a17      	ldr	r2, [pc, #92]	@ (800253c <UART_SetConfig+0x2dc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d13a      	bne.n	8002558 <UART_SetConfig+0x2f8>
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <UART_SetConfig+0x2e4>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80024f0:	d01a      	beq.n	8002528 <UART_SetConfig+0x2c8>
 80024f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80024f6:	d81b      	bhi.n	8002530 <UART_SetConfig+0x2d0>
 80024f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024fc:	d00c      	beq.n	8002518 <UART_SetConfig+0x2b8>
 80024fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002502:	d815      	bhi.n	8002530 <UART_SetConfig+0x2d0>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <UART_SetConfig+0x2b0>
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250c:	d008      	beq.n	8002520 <UART_SetConfig+0x2c0>
 800250e:	e00f      	b.n	8002530 <UART_SetConfig+0x2d0>
 8002510:	2300      	movs	r3, #0
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002516:	e022      	b.n	800255e <UART_SetConfig+0x2fe>
 8002518:	2302      	movs	r3, #2
 800251a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800251e:	e01e      	b.n	800255e <UART_SetConfig+0x2fe>
 8002520:	2304      	movs	r3, #4
 8002522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002526:	e01a      	b.n	800255e <UART_SetConfig+0x2fe>
 8002528:	2308      	movs	r3, #8
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800252e:	e016      	b.n	800255e <UART_SetConfig+0x2fe>
 8002530:	2310      	movs	r3, #16
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002536:	e012      	b.n	800255e <UART_SetConfig+0x2fe>
 8002538:	cfff69f3 	.word	0xcfff69f3
 800253c:	40008000 	.word	0x40008000
 8002540:	40013800 	.word	0x40013800
 8002544:	40021000 	.word	0x40021000
 8002548:	40004400 	.word	0x40004400
 800254c:	40004800 	.word	0x40004800
 8002550:	40004c00 	.word	0x40004c00
 8002554:	40005000 	.word	0x40005000
 8002558:	2310      	movs	r3, #16
 800255a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4aae      	ldr	r2, [pc, #696]	@ (800281c <UART_SetConfig+0x5bc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	f040 8097 	bne.w	8002698 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800256a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800256e:	2b08      	cmp	r3, #8
 8002570:	d823      	bhi.n	80025ba <UART_SetConfig+0x35a>
 8002572:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <UART_SetConfig+0x318>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	0800259d 	.word	0x0800259d
 800257c:	080025bb 	.word	0x080025bb
 8002580:	080025a5 	.word	0x080025a5
 8002584:	080025bb 	.word	0x080025bb
 8002588:	080025ab 	.word	0x080025ab
 800258c:	080025bb 	.word	0x080025bb
 8002590:	080025bb 	.word	0x080025bb
 8002594:	080025bb 	.word	0x080025bb
 8002598:	080025b3 	.word	0x080025b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800259c:	f7ff fd06 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025a2:	e010      	b.n	80025c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002820 <UART_SetConfig+0x5c0>)
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025a8:	e00d      	b.n	80025c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025aa:	f7ff fc91 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80025ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025b0:	e009      	b.n	80025c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025b8:	e005      	b.n	80025c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80025c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8130 	beq.w	800282e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	4a94      	ldr	r2, [pc, #592]	@ (8002824 <UART_SetConfig+0x5c4>)
 80025d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d8:	461a      	mov	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d305      	bcc.n	80025fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d903      	bls.n	8002606 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002604:	e113      	b.n	800282e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	2200      	movs	r2, #0
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	60fa      	str	r2, [r7, #12]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	4a84      	ldr	r2, [pc, #528]	@ (8002824 <UART_SetConfig+0x5c4>)
 8002614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002618:	b29b      	uxth	r3, r3
 800261a:	2200      	movs	r2, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002628:	f7fd fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	020b      	lsls	r3, r1, #8
 800263e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002642:	0202      	lsls	r2, r0, #8
 8002644:	6979      	ldr	r1, [r7, #20]
 8002646:	6849      	ldr	r1, [r1, #4]
 8002648:	0849      	lsrs	r1, r1, #1
 800264a:	2000      	movs	r0, #0
 800264c:	460c      	mov	r4, r1
 800264e:	4605      	mov	r5, r0
 8002650:	eb12 0804 	adds.w	r8, r2, r4
 8002654:	eb43 0905 	adc.w	r9, r3, r5
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	469a      	mov	sl, r3
 8002660:	4693      	mov	fp, r2
 8002662:	4652      	mov	r2, sl
 8002664:	465b      	mov	r3, fp
 8002666:	4640      	mov	r0, r8
 8002668:	4649      	mov	r1, r9
 800266a:	f7fd fe29 	bl	80002c0 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4613      	mov	r3, r2
 8002674:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800267c:	d308      	bcc.n	8002690 <UART_SetConfig+0x430>
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002684:	d204      	bcs.n	8002690 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a3a      	ldr	r2, [r7, #32]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e0ce      	b.n	800282e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002696:	e0ca      	b.n	800282e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a0:	d166      	bne.n	8002770 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80026a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d827      	bhi.n	80026fa <UART_SetConfig+0x49a>
 80026aa:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <UART_SetConfig+0x450>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026d5 	.word	0x080026d5
 80026b4:	080026dd 	.word	0x080026dd
 80026b8:	080026e5 	.word	0x080026e5
 80026bc:	080026fb 	.word	0x080026fb
 80026c0:	080026eb 	.word	0x080026eb
 80026c4:	080026fb 	.word	0x080026fb
 80026c8:	080026fb 	.word	0x080026fb
 80026cc:	080026fb 	.word	0x080026fb
 80026d0:	080026f3 	.word	0x080026f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d4:	f7ff fc6a 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026da:	e014      	b.n	8002706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026dc:	f7ff fc7c 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 80026e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026e2:	e010      	b.n	8002706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <UART_SetConfig+0x5c0>)
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026e8:	e00d      	b.n	8002706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ea:	f7ff fbf1 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80026ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026f0:	e009      	b.n	8002706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026f8:	e005      	b.n	8002706 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8090 	beq.w	800282e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	4a44      	ldr	r2, [pc, #272]	@ (8002824 <UART_SetConfig+0x5c4>)
 8002714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002718:	461a      	mov	r2, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002720:	005a      	lsls	r2, r3, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	441a      	add	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	d916      	bls.n	8002768 <UART_SetConfig+0x508>
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002740:	d212      	bcs.n	8002768 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f023 030f 	bic.w	r3, r3, #15
 800274a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	b29a      	uxth	r2, r3
 8002758:	8bfb      	ldrh	r3, [r7, #30]
 800275a:	4313      	orrs	r3, r2
 800275c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	8bfa      	ldrh	r2, [r7, #30]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	e062      	b.n	800282e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800276e:	e05e      	b.n	800282e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002770:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002774:	2b08      	cmp	r3, #8
 8002776:	d828      	bhi.n	80027ca <UART_SetConfig+0x56a>
 8002778:	a201      	add	r2, pc, #4	@ (adr r2, 8002780 <UART_SetConfig+0x520>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027a5 	.word	0x080027a5
 8002784:	080027ad 	.word	0x080027ad
 8002788:	080027b5 	.word	0x080027b5
 800278c:	080027cb 	.word	0x080027cb
 8002790:	080027bb 	.word	0x080027bb
 8002794:	080027cb 	.word	0x080027cb
 8002798:	080027cb 	.word	0x080027cb
 800279c:	080027cb 	.word	0x080027cb
 80027a0:	080027c3 	.word	0x080027c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff fc02 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027aa:	e014      	b.n	80027d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027ac:	f7ff fc14 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 80027b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027b2:	e010      	b.n	80027d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <UART_SetConfig+0x5c0>)
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027b8:	e00d      	b.n	80027d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ba:	f7ff fb89 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80027be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027c0:	e009      	b.n	80027d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027c8:	e005      	b.n	80027d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80027d4:	bf00      	nop
    }

    if (pclk != 0U)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d028      	beq.n	800282e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	4a10      	ldr	r2, [pc, #64]	@ (8002824 <UART_SetConfig+0x5c4>)
 80027e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e6:	461a      	mov	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	441a      	add	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	d910      	bls.n	8002828 <UART_SetConfig+0x5c8>
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d20c      	bcs.n	8002828 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	b29a      	uxth	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60da      	str	r2, [r3, #12]
 8002818:	e009      	b.n	800282e <UART_SetConfig+0x5ce>
 800281a:	bf00      	nop
 800281c:	40008000 	.word	0x40008000
 8002820:	00f42400 	.word	0x00f42400
 8002824:	08003b48 	.word	0x08003b48
      }
      else
      {
        ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2201      	movs	r2, #1
 8002832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2201      	movs	r2, #1
 800283a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2200      	movs	r2, #0
 8002848:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800284a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800284e:	4618      	mov	r0, r3
 8002850:	3730      	adds	r7, #48	@ 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01a      	beq.n	800296e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002956:	d10a      	bne.n	800296e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  }
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b098      	sub	sp, #96	@ 0x60
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029ac:	f7fe fa5e 	bl	8000e6c <HAL_GetTick>
 80029b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d12f      	bne.n	8002a20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f88e 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d022      	beq.n	8002a20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e6      	bne.n	80029da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e063      	b.n	8002ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d149      	bne.n	8002ac2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f857 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d03c      	beq.n	8002ac2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	e853 3f00 	ldrex	r3, [r3]
 8002a54:	623b      	str	r3, [r7, #32]
   return(result);
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e6      	bne.n	8002a48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3308      	adds	r3, #8
 8002a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a9a:	61fa      	str	r2, [r7, #28]
 8002a9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e012      	b.n	8002ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3758      	adds	r7, #88	@ 0x58
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	e04f      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d04b      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe f9af 	bl	8000e6c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e04e      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d037      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b80      	cmp	r3, #128	@ 0x80
 8002b36:	d034      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d031      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d110      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2208      	movs	r2, #8
 8002b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f838 	bl	8002bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e029      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b7c:	d111      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f81e 	bl	8002bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d0a0      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b095      	sub	sp, #84	@ 0x54
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e6      	bne.n	8002bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3308      	adds	r3, #8
 8002c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e3      	bne.n	8002c04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d118      	bne.n	8002c76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f023 0310 	bic.w	r3, r3, #16
 8002c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e6      	bne.n	8002c44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c8a:	bf00      	nop
 8002c8c:	3754      	adds	r7, #84	@ 0x54
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <std>:
 8002c98:	2300      	movs	r3, #0
 8002c9a:	b510      	push	{r4, lr}
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8002ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ca6:	6083      	str	r3, [r0, #8]
 8002ca8:	8181      	strh	r1, [r0, #12]
 8002caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cac:	81c2      	strh	r2, [r0, #14]
 8002cae:	6183      	str	r3, [r0, #24]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	305c      	adds	r0, #92	@ 0x5c
 8002cb6:	f000 f906 	bl	8002ec6 <memset>
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <std+0x58>)
 8002cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <std+0x5c>)
 8002cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <std+0x60>)
 8002cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <std+0x64>)
 8002cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <std+0x68>)
 8002ccc:	6224      	str	r4, [r4, #32]
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	d006      	beq.n	8002ce0 <std+0x48>
 8002cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002cd6:	4294      	cmp	r4, r2
 8002cd8:	d002      	beq.n	8002ce0 <std+0x48>
 8002cda:	33d0      	adds	r3, #208	@ 0xd0
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	d105      	bne.n	8002cec <std+0x54>
 8002ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ce8:	f000 b966 	b.w	8002fb8 <__retarget_lock_init_recursive>
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	bf00      	nop
 8002cf0:	08002e41 	.word	0x08002e41
 8002cf4:	08002e63 	.word	0x08002e63
 8002cf8:	08002e9b 	.word	0x08002e9b
 8002cfc:	08002ebf 	.word	0x08002ebf
 8002d00:	20000154 	.word	0x20000154

08002d04 <stdio_exit_handler>:
 8002d04:	4a02      	ldr	r2, [pc, #8]	@ (8002d10 <stdio_exit_handler+0xc>)
 8002d06:	4903      	ldr	r1, [pc, #12]	@ (8002d14 <stdio_exit_handler+0x10>)
 8002d08:	4803      	ldr	r0, [pc, #12]	@ (8002d18 <stdio_exit_handler+0x14>)
 8002d0a:	f000 b869 	b.w	8002de0 <_fwalk_sglue>
 8002d0e:	bf00      	nop
 8002d10:	20000020 	.word	0x20000020
 8002d14:	08003859 	.word	0x08003859
 8002d18:	20000030 	.word	0x20000030

08002d1c <cleanup_stdio>:
 8002d1c:	6841      	ldr	r1, [r0, #4]
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <cleanup_stdio+0x34>)
 8002d20:	4299      	cmp	r1, r3
 8002d22:	b510      	push	{r4, lr}
 8002d24:	4604      	mov	r4, r0
 8002d26:	d001      	beq.n	8002d2c <cleanup_stdio+0x10>
 8002d28:	f000 fd96 	bl	8003858 <_fflush_r>
 8002d2c:	68a1      	ldr	r1, [r4, #8]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <cleanup_stdio+0x38>)
 8002d30:	4299      	cmp	r1, r3
 8002d32:	d002      	beq.n	8002d3a <cleanup_stdio+0x1e>
 8002d34:	4620      	mov	r0, r4
 8002d36:	f000 fd8f 	bl	8003858 <_fflush_r>
 8002d3a:	68e1      	ldr	r1, [r4, #12]
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <cleanup_stdio+0x3c>)
 8002d3e:	4299      	cmp	r1, r3
 8002d40:	d004      	beq.n	8002d4c <cleanup_stdio+0x30>
 8002d42:	4620      	mov	r0, r4
 8002d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d48:	f000 bd86 	b.w	8003858 <_fflush_r>
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000154 	.word	0x20000154
 8002d54:	200001bc 	.word	0x200001bc
 8002d58:	20000224 	.word	0x20000224

08002d5c <global_stdio_init.part.0>:
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <global_stdio_init.part.0+0x30>)
 8002d60:	4c0b      	ldr	r4, [pc, #44]	@ (8002d90 <global_stdio_init.part.0+0x34>)
 8002d62:	4a0c      	ldr	r2, [pc, #48]	@ (8002d94 <global_stdio_init.part.0+0x38>)
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	4620      	mov	r0, r4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	f7ff ff94 	bl	8002c98 <std>
 8002d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d74:	2201      	movs	r2, #1
 8002d76:	2109      	movs	r1, #9
 8002d78:	f7ff ff8e 	bl	8002c98 <std>
 8002d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d80:	2202      	movs	r2, #2
 8002d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d86:	2112      	movs	r1, #18
 8002d88:	f7ff bf86 	b.w	8002c98 <std>
 8002d8c:	2000028c 	.word	0x2000028c
 8002d90:	20000154 	.word	0x20000154
 8002d94:	08002d05 	.word	0x08002d05

08002d98 <__sfp_lock_acquire>:
 8002d98:	4801      	ldr	r0, [pc, #4]	@ (8002da0 <__sfp_lock_acquire+0x8>)
 8002d9a:	f000 b90e 	b.w	8002fba <__retarget_lock_acquire_recursive>
 8002d9e:	bf00      	nop
 8002da0:	20000295 	.word	0x20000295

08002da4 <__sfp_lock_release>:
 8002da4:	4801      	ldr	r0, [pc, #4]	@ (8002dac <__sfp_lock_release+0x8>)
 8002da6:	f000 b909 	b.w	8002fbc <__retarget_lock_release_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000295 	.word	0x20000295

08002db0 <__sinit>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
 8002db4:	f7ff fff0 	bl	8002d98 <__sfp_lock_acquire>
 8002db8:	6a23      	ldr	r3, [r4, #32]
 8002dba:	b11b      	cbz	r3, 8002dc4 <__sinit+0x14>
 8002dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc0:	f7ff bff0 	b.w	8002da4 <__sfp_lock_release>
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__sinit+0x28>)
 8002dc6:	6223      	str	r3, [r4, #32]
 8002dc8:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <__sinit+0x2c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f5      	bne.n	8002dbc <__sinit+0xc>
 8002dd0:	f7ff ffc4 	bl	8002d5c <global_stdio_init.part.0>
 8002dd4:	e7f2      	b.n	8002dbc <__sinit+0xc>
 8002dd6:	bf00      	nop
 8002dd8:	08002d1d 	.word	0x08002d1d
 8002ddc:	2000028c 	.word	0x2000028c

08002de0 <_fwalk_sglue>:
 8002de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de4:	4607      	mov	r7, r0
 8002de6:	4688      	mov	r8, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	2600      	movs	r6, #0
 8002dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002df0:	f1b9 0901 	subs.w	r9, r9, #1
 8002df4:	d505      	bpl.n	8002e02 <_fwalk_sglue+0x22>
 8002df6:	6824      	ldr	r4, [r4, #0]
 8002df8:	2c00      	cmp	r4, #0
 8002dfa:	d1f7      	bne.n	8002dec <_fwalk_sglue+0xc>
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e02:	89ab      	ldrh	r3, [r5, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d907      	bls.n	8002e18 <_fwalk_sglue+0x38>
 8002e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	d003      	beq.n	8002e18 <_fwalk_sglue+0x38>
 8002e10:	4629      	mov	r1, r5
 8002e12:	4638      	mov	r0, r7
 8002e14:	47c0      	blx	r8
 8002e16:	4306      	orrs	r6, r0
 8002e18:	3568      	adds	r5, #104	@ 0x68
 8002e1a:	e7e9      	b.n	8002df0 <_fwalk_sglue+0x10>

08002e1c <iprintf>:
 8002e1c:	b40f      	push	{r0, r1, r2, r3}
 8002e1e:	b507      	push	{r0, r1, r2, lr}
 8002e20:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <iprintf+0x20>)
 8002e22:	ab04      	add	r3, sp, #16
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e2a:	6881      	ldr	r1, [r0, #8]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	f000 f9e9 	bl	8003204 <_vfiprintf_r>
 8002e32:	b003      	add	sp, #12
 8002e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e38:	b004      	add	sp, #16
 8002e3a:	4770      	bx	lr
 8002e3c:	2000002c 	.word	0x2000002c

08002e40 <__sread>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	460c      	mov	r4, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	f000 f868 	bl	8002f1c <_read_r>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	bfab      	itete	ge
 8002e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e52:	89a3      	ldrhlt	r3, [r4, #12]
 8002e54:	181b      	addge	r3, r3, r0
 8002e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e5a:	bfac      	ite	ge
 8002e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e5e:	81a3      	strhlt	r3, [r4, #12]
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <__swrite>:
 8002e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e66:	461f      	mov	r7, r3
 8002e68:	898b      	ldrh	r3, [r1, #12]
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4616      	mov	r6, r2
 8002e72:	d505      	bpl.n	8002e80 <__swrite+0x1e>
 8002e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e78:	2302      	movs	r3, #2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f000 f83c 	bl	8002ef8 <_lseek_r>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4628      	mov	r0, r5
 8002e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e96:	f000 b853 	b.w	8002f40 <_write_r>

08002e9a <__sseek>:
 8002e9a:	b510      	push	{r4, lr}
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea2:	f000 f829 	bl	8002ef8 <_lseek_r>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	bf15      	itete	ne
 8002eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eb6:	81a3      	strheq	r3, [r4, #12]
 8002eb8:	bf18      	it	ne
 8002eba:	81a3      	strhne	r3, [r4, #12]
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <__sclose>:
 8002ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec2:	f000 b809 	b.w	8002ed8 <_close_r>

08002ec6 <memset>:
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <memset+0xa>
 8002ece:	4770      	bx	lr
 8002ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed4:	e7f9      	b.n	8002eca <memset+0x4>
	...

08002ed8 <_close_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4d06      	ldr	r5, [pc, #24]	@ (8002ef4 <_close_r+0x1c>)
 8002edc:	2300      	movs	r3, #0
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	f7fd fd03 	bl	80008ee <_close>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_close_r+0x1a>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_close_r+0x1a>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	20000290 	.word	0x20000290

08002ef8 <_lseek_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4d07      	ldr	r5, [pc, #28]	@ (8002f18 <_lseek_r+0x20>)
 8002efc:	4604      	mov	r4, r0
 8002efe:	4608      	mov	r0, r1
 8002f00:	4611      	mov	r1, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	602a      	str	r2, [r5, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7fd fd18 	bl	800093c <_lseek>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_lseek_r+0x1e>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_lseek_r+0x1e>
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	20000290 	.word	0x20000290

08002f1c <_read_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d07      	ldr	r5, [pc, #28]	@ (8002f3c <_read_r+0x20>)
 8002f20:	4604      	mov	r4, r0
 8002f22:	4608      	mov	r0, r1
 8002f24:	4611      	mov	r1, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	602a      	str	r2, [r5, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f7fd fca6 	bl	800087c <_read>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_read_r+0x1e>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_read_r+0x1e>
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	20000290 	.word	0x20000290

08002f40 <_write_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4d07      	ldr	r5, [pc, #28]	@ (8002f60 <_write_r+0x20>)
 8002f44:	4604      	mov	r4, r0
 8002f46:	4608      	mov	r0, r1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	602a      	str	r2, [r5, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7fd fcb1 	bl	80008b6 <_write>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_write_r+0x1e>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_write_r+0x1e>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20000290 	.word	0x20000290

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	@ (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000002c 	.word	0x2000002c

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa8 <__libc_init_array+0x38>)
 8002f74:	4c0d      	ldr	r4, [pc, #52]	@ (8002fac <__libc_init_array+0x3c>)
 8002f76:	1b64      	subs	r4, r4, r5
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	4d0b      	ldr	r5, [pc, #44]	@ (8002fb0 <__libc_init_array+0x40>)
 8002f82:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb4 <__libc_init_array+0x44>)
 8002f84:	f000 fdb8 	bl	8003af8 <_init>
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003b9c 	.word	0x08003b9c
 8002fac:	08003b9c 	.word	0x08003b9c
 8002fb0:	08003b9c 	.word	0x08003b9c
 8002fb4:	08003ba0 	.word	0x08003ba0

08002fb8 <__retarget_lock_init_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_acquire_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__retarget_lock_release_recursive>:
 8002fbc:	4770      	bx	lr
	...

08002fc0 <_free_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d041      	beq.n	800304c <_free_r+0x8c>
 8002fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fcc:	1f0c      	subs	r4, r1, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	18e4      	addlt	r4, r4, r3
 8002fd4:	f000 f8e0 	bl	8003198 <__malloc_lock>
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <_free_r+0x90>)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	b933      	cbnz	r3, 8002fec <_free_r+0x2c>
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	6014      	str	r4, [r2, #0]
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe8:	f000 b8dc 	b.w	80031a4 <__malloc_unlock>
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d908      	bls.n	8003002 <_free_r+0x42>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	1821      	adds	r1, r4, r0
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	bf01      	itttt	eq
 8002ff8:	6819      	ldreq	r1, [r3, #0]
 8002ffa:	685b      	ldreq	r3, [r3, #4]
 8002ffc:	1809      	addeq	r1, r1, r0
 8002ffe:	6021      	streq	r1, [r4, #0]
 8003000:	e7ed      	b.n	8002fde <_free_r+0x1e>
 8003002:	461a      	mov	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b10b      	cbz	r3, 800300c <_free_r+0x4c>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d9fa      	bls.n	8003002 <_free_r+0x42>
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	1850      	adds	r0, r2, r1
 8003010:	42a0      	cmp	r0, r4
 8003012:	d10b      	bne.n	800302c <_free_r+0x6c>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	4401      	add	r1, r0
 8003018:	1850      	adds	r0, r2, r1
 800301a:	4283      	cmp	r3, r0
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	d1e0      	bne.n	8002fe2 <_free_r+0x22>
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	6053      	str	r3, [r2, #4]
 8003026:	4408      	add	r0, r1
 8003028:	6010      	str	r0, [r2, #0]
 800302a:	e7da      	b.n	8002fe2 <_free_r+0x22>
 800302c:	d902      	bls.n	8003034 <_free_r+0x74>
 800302e:	230c      	movs	r3, #12
 8003030:	602b      	str	r3, [r5, #0]
 8003032:	e7d6      	b.n	8002fe2 <_free_r+0x22>
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	1821      	adds	r1, r4, r0
 8003038:	428b      	cmp	r3, r1
 800303a:	bf04      	itt	eq
 800303c:	6819      	ldreq	r1, [r3, #0]
 800303e:	685b      	ldreq	r3, [r3, #4]
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	bf04      	itt	eq
 8003044:	1809      	addeq	r1, r1, r0
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	6054      	str	r4, [r2, #4]
 800304a:	e7ca      	b.n	8002fe2 <_free_r+0x22>
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	2000029c 	.word	0x2000029c

08003054 <sbrk_aligned>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4e0f      	ldr	r6, [pc, #60]	@ (8003094 <sbrk_aligned+0x40>)
 8003058:	460c      	mov	r4, r1
 800305a:	6831      	ldr	r1, [r6, #0]
 800305c:	4605      	mov	r5, r0
 800305e:	b911      	cbnz	r1, 8003066 <sbrk_aligned+0x12>
 8003060:	f000 fcb6 	bl	80039d0 <_sbrk_r>
 8003064:	6030      	str	r0, [r6, #0]
 8003066:	4621      	mov	r1, r4
 8003068:	4628      	mov	r0, r5
 800306a:	f000 fcb1 	bl	80039d0 <_sbrk_r>
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	d103      	bne.n	800307a <sbrk_aligned+0x26>
 8003072:	f04f 34ff 	mov.w	r4, #4294967295
 8003076:	4620      	mov	r0, r4
 8003078:	bd70      	pop	{r4, r5, r6, pc}
 800307a:	1cc4      	adds	r4, r0, #3
 800307c:	f024 0403 	bic.w	r4, r4, #3
 8003080:	42a0      	cmp	r0, r4
 8003082:	d0f8      	beq.n	8003076 <sbrk_aligned+0x22>
 8003084:	1a21      	subs	r1, r4, r0
 8003086:	4628      	mov	r0, r5
 8003088:	f000 fca2 	bl	80039d0 <_sbrk_r>
 800308c:	3001      	adds	r0, #1
 800308e:	d1f2      	bne.n	8003076 <sbrk_aligned+0x22>
 8003090:	e7ef      	b.n	8003072 <sbrk_aligned+0x1e>
 8003092:	bf00      	nop
 8003094:	20000298 	.word	0x20000298

08003098 <_malloc_r>:
 8003098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800309c:	1ccd      	adds	r5, r1, #3
 800309e:	f025 0503 	bic.w	r5, r5, #3
 80030a2:	3508      	adds	r5, #8
 80030a4:	2d0c      	cmp	r5, #12
 80030a6:	bf38      	it	cc
 80030a8:	250c      	movcc	r5, #12
 80030aa:	2d00      	cmp	r5, #0
 80030ac:	4606      	mov	r6, r0
 80030ae:	db01      	blt.n	80030b4 <_malloc_r+0x1c>
 80030b0:	42a9      	cmp	r1, r5
 80030b2:	d904      	bls.n	80030be <_malloc_r+0x26>
 80030b4:	230c      	movs	r3, #12
 80030b6:	6033      	str	r3, [r6, #0]
 80030b8:	2000      	movs	r0, #0
 80030ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003194 <_malloc_r+0xfc>
 80030c2:	f000 f869 	bl	8003198 <__malloc_lock>
 80030c6:	f8d8 3000 	ldr.w	r3, [r8]
 80030ca:	461c      	mov	r4, r3
 80030cc:	bb44      	cbnz	r4, 8003120 <_malloc_r+0x88>
 80030ce:	4629      	mov	r1, r5
 80030d0:	4630      	mov	r0, r6
 80030d2:	f7ff ffbf 	bl	8003054 <sbrk_aligned>
 80030d6:	1c43      	adds	r3, r0, #1
 80030d8:	4604      	mov	r4, r0
 80030da:	d158      	bne.n	800318e <_malloc_r+0xf6>
 80030dc:	f8d8 4000 	ldr.w	r4, [r8]
 80030e0:	4627      	mov	r7, r4
 80030e2:	2f00      	cmp	r7, #0
 80030e4:	d143      	bne.n	800316e <_malloc_r+0xd6>
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d04b      	beq.n	8003182 <_malloc_r+0xea>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	4639      	mov	r1, r7
 80030ee:	4630      	mov	r0, r6
 80030f0:	eb04 0903 	add.w	r9, r4, r3
 80030f4:	f000 fc6c 	bl	80039d0 <_sbrk_r>
 80030f8:	4581      	cmp	r9, r0
 80030fa:	d142      	bne.n	8003182 <_malloc_r+0xea>
 80030fc:	6821      	ldr	r1, [r4, #0]
 80030fe:	1a6d      	subs	r5, r5, r1
 8003100:	4629      	mov	r1, r5
 8003102:	4630      	mov	r0, r6
 8003104:	f7ff ffa6 	bl	8003054 <sbrk_aligned>
 8003108:	3001      	adds	r0, #1
 800310a:	d03a      	beq.n	8003182 <_malloc_r+0xea>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	442b      	add	r3, r5
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	f8d8 3000 	ldr.w	r3, [r8]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	bb62      	cbnz	r2, 8003174 <_malloc_r+0xdc>
 800311a:	f8c8 7000 	str.w	r7, [r8]
 800311e:	e00f      	b.n	8003140 <_malloc_r+0xa8>
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	1b52      	subs	r2, r2, r5
 8003124:	d420      	bmi.n	8003168 <_malloc_r+0xd0>
 8003126:	2a0b      	cmp	r2, #11
 8003128:	d917      	bls.n	800315a <_malloc_r+0xc2>
 800312a:	1961      	adds	r1, r4, r5
 800312c:	42a3      	cmp	r3, r4
 800312e:	6025      	str	r5, [r4, #0]
 8003130:	bf18      	it	ne
 8003132:	6059      	strne	r1, [r3, #4]
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	bf08      	it	eq
 8003138:	f8c8 1000 	streq.w	r1, [r8]
 800313c:	5162      	str	r2, [r4, r5]
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	4630      	mov	r0, r6
 8003142:	f000 f82f 	bl	80031a4 <__malloc_unlock>
 8003146:	f104 000b 	add.w	r0, r4, #11
 800314a:	1d23      	adds	r3, r4, #4
 800314c:	f020 0007 	bic.w	r0, r0, #7
 8003150:	1ac2      	subs	r2, r0, r3
 8003152:	bf1c      	itt	ne
 8003154:	1a1b      	subne	r3, r3, r0
 8003156:	50a3      	strne	r3, [r4, r2]
 8003158:	e7af      	b.n	80030ba <_malloc_r+0x22>
 800315a:	6862      	ldr	r2, [r4, #4]
 800315c:	42a3      	cmp	r3, r4
 800315e:	bf0c      	ite	eq
 8003160:	f8c8 2000 	streq.w	r2, [r8]
 8003164:	605a      	strne	r2, [r3, #4]
 8003166:	e7eb      	b.n	8003140 <_malloc_r+0xa8>
 8003168:	4623      	mov	r3, r4
 800316a:	6864      	ldr	r4, [r4, #4]
 800316c:	e7ae      	b.n	80030cc <_malloc_r+0x34>
 800316e:	463c      	mov	r4, r7
 8003170:	687f      	ldr	r7, [r7, #4]
 8003172:	e7b6      	b.n	80030e2 <_malloc_r+0x4a>
 8003174:	461a      	mov	r2, r3
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	42a3      	cmp	r3, r4
 800317a:	d1fb      	bne.n	8003174 <_malloc_r+0xdc>
 800317c:	2300      	movs	r3, #0
 800317e:	6053      	str	r3, [r2, #4]
 8003180:	e7de      	b.n	8003140 <_malloc_r+0xa8>
 8003182:	230c      	movs	r3, #12
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	4630      	mov	r0, r6
 8003188:	f000 f80c 	bl	80031a4 <__malloc_unlock>
 800318c:	e794      	b.n	80030b8 <_malloc_r+0x20>
 800318e:	6005      	str	r5, [r0, #0]
 8003190:	e7d6      	b.n	8003140 <_malloc_r+0xa8>
 8003192:	bf00      	nop
 8003194:	2000029c 	.word	0x2000029c

08003198 <__malloc_lock>:
 8003198:	4801      	ldr	r0, [pc, #4]	@ (80031a0 <__malloc_lock+0x8>)
 800319a:	f7ff bf0e 	b.w	8002fba <__retarget_lock_acquire_recursive>
 800319e:	bf00      	nop
 80031a0:	20000294 	.word	0x20000294

080031a4 <__malloc_unlock>:
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <__malloc_unlock+0x8>)
 80031a6:	f7ff bf09 	b.w	8002fbc <__retarget_lock_release_recursive>
 80031aa:	bf00      	nop
 80031ac:	20000294 	.word	0x20000294

080031b0 <__sfputc_r>:
 80031b0:	6893      	ldr	r3, [r2, #8]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	b410      	push	{r4}
 80031b8:	6093      	str	r3, [r2, #8]
 80031ba:	da08      	bge.n	80031ce <__sfputc_r+0x1e>
 80031bc:	6994      	ldr	r4, [r2, #24]
 80031be:	42a3      	cmp	r3, r4
 80031c0:	db01      	blt.n	80031c6 <__sfputc_r+0x16>
 80031c2:	290a      	cmp	r1, #10
 80031c4:	d103      	bne.n	80031ce <__sfputc_r+0x1e>
 80031c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ca:	f000 bb6d 	b.w	80038a8 <__swbuf_r>
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	1c58      	adds	r0, r3, #1
 80031d2:	6010      	str	r0, [r2, #0]
 80031d4:	7019      	strb	r1, [r3, #0]
 80031d6:	4608      	mov	r0, r1
 80031d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031dc:	4770      	bx	lr

080031de <__sfputs_r>:
 80031de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e0:	4606      	mov	r6, r0
 80031e2:	460f      	mov	r7, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	18d5      	adds	r5, r2, r3
 80031e8:	42ac      	cmp	r4, r5
 80031ea:	d101      	bne.n	80031f0 <__sfputs_r+0x12>
 80031ec:	2000      	movs	r0, #0
 80031ee:	e007      	b.n	8003200 <__sfputs_r+0x22>
 80031f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f4:	463a      	mov	r2, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	f7ff ffda 	bl	80031b0 <__sfputc_r>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d1f3      	bne.n	80031e8 <__sfputs_r+0xa>
 8003200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003204 <_vfiprintf_r>:
 8003204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003208:	460d      	mov	r5, r1
 800320a:	b09d      	sub	sp, #116	@ 0x74
 800320c:	4614      	mov	r4, r2
 800320e:	4698      	mov	r8, r3
 8003210:	4606      	mov	r6, r0
 8003212:	b118      	cbz	r0, 800321c <_vfiprintf_r+0x18>
 8003214:	6a03      	ldr	r3, [r0, #32]
 8003216:	b90b      	cbnz	r3, 800321c <_vfiprintf_r+0x18>
 8003218:	f7ff fdca 	bl	8002db0 <__sinit>
 800321c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800321e:	07d9      	lsls	r1, r3, #31
 8003220:	d405      	bmi.n	800322e <_vfiprintf_r+0x2a>
 8003222:	89ab      	ldrh	r3, [r5, #12]
 8003224:	059a      	lsls	r2, r3, #22
 8003226:	d402      	bmi.n	800322e <_vfiprintf_r+0x2a>
 8003228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800322a:	f7ff fec6 	bl	8002fba <__retarget_lock_acquire_recursive>
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	d501      	bpl.n	8003238 <_vfiprintf_r+0x34>
 8003234:	692b      	ldr	r3, [r5, #16]
 8003236:	b99b      	cbnz	r3, 8003260 <_vfiprintf_r+0x5c>
 8003238:	4629      	mov	r1, r5
 800323a:	4630      	mov	r0, r6
 800323c:	f000 fb72 	bl	8003924 <__swsetup_r>
 8003240:	b170      	cbz	r0, 8003260 <_vfiprintf_r+0x5c>
 8003242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003244:	07dc      	lsls	r4, r3, #31
 8003246:	d504      	bpl.n	8003252 <_vfiprintf_r+0x4e>
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	b01d      	add	sp, #116	@ 0x74
 800324e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003252:	89ab      	ldrh	r3, [r5, #12]
 8003254:	0598      	lsls	r0, r3, #22
 8003256:	d4f7      	bmi.n	8003248 <_vfiprintf_r+0x44>
 8003258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800325a:	f7ff feaf 	bl	8002fbc <__retarget_lock_release_recursive>
 800325e:	e7f3      	b.n	8003248 <_vfiprintf_r+0x44>
 8003260:	2300      	movs	r3, #0
 8003262:	9309      	str	r3, [sp, #36]	@ 0x24
 8003264:	2320      	movs	r3, #32
 8003266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800326a:	f8cd 800c 	str.w	r8, [sp, #12]
 800326e:	2330      	movs	r3, #48	@ 0x30
 8003270:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003420 <_vfiprintf_r+0x21c>
 8003274:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003278:	f04f 0901 	mov.w	r9, #1
 800327c:	4623      	mov	r3, r4
 800327e:	469a      	mov	sl, r3
 8003280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003284:	b10a      	cbz	r2, 800328a <_vfiprintf_r+0x86>
 8003286:	2a25      	cmp	r2, #37	@ 0x25
 8003288:	d1f9      	bne.n	800327e <_vfiprintf_r+0x7a>
 800328a:	ebba 0b04 	subs.w	fp, sl, r4
 800328e:	d00b      	beq.n	80032a8 <_vfiprintf_r+0xa4>
 8003290:	465b      	mov	r3, fp
 8003292:	4622      	mov	r2, r4
 8003294:	4629      	mov	r1, r5
 8003296:	4630      	mov	r0, r6
 8003298:	f7ff ffa1 	bl	80031de <__sfputs_r>
 800329c:	3001      	adds	r0, #1
 800329e:	f000 80a7 	beq.w	80033f0 <_vfiprintf_r+0x1ec>
 80032a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032a4:	445a      	add	r2, fp
 80032a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80032a8:	f89a 3000 	ldrb.w	r3, [sl]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 809f 	beq.w	80033f0 <_vfiprintf_r+0x1ec>
 80032b2:	2300      	movs	r3, #0
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032bc:	f10a 0a01 	add.w	sl, sl, #1
 80032c0:	9304      	str	r3, [sp, #16]
 80032c2:	9307      	str	r3, [sp, #28]
 80032c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80032ca:	4654      	mov	r4, sl
 80032cc:	2205      	movs	r2, #5
 80032ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d2:	4853      	ldr	r0, [pc, #332]	@ (8003420 <_vfiprintf_r+0x21c>)
 80032d4:	f7fc ffa4 	bl	8000220 <memchr>
 80032d8:	9a04      	ldr	r2, [sp, #16]
 80032da:	b9d8      	cbnz	r0, 8003314 <_vfiprintf_r+0x110>
 80032dc:	06d1      	lsls	r1, r2, #27
 80032de:	bf44      	itt	mi
 80032e0:	2320      	movmi	r3, #32
 80032e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032e6:	0713      	lsls	r3, r2, #28
 80032e8:	bf44      	itt	mi
 80032ea:	232b      	movmi	r3, #43	@ 0x2b
 80032ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f0:	f89a 3000 	ldrb.w	r3, [sl]
 80032f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80032f6:	d015      	beq.n	8003324 <_vfiprintf_r+0x120>
 80032f8:	9a07      	ldr	r2, [sp, #28]
 80032fa:	4654      	mov	r4, sl
 80032fc:	2000      	movs	r0, #0
 80032fe:	f04f 0c0a 	mov.w	ip, #10
 8003302:	4621      	mov	r1, r4
 8003304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003308:	3b30      	subs	r3, #48	@ 0x30
 800330a:	2b09      	cmp	r3, #9
 800330c:	d94b      	bls.n	80033a6 <_vfiprintf_r+0x1a2>
 800330e:	b1b0      	cbz	r0, 800333e <_vfiprintf_r+0x13a>
 8003310:	9207      	str	r2, [sp, #28]
 8003312:	e014      	b.n	800333e <_vfiprintf_r+0x13a>
 8003314:	eba0 0308 	sub.w	r3, r0, r8
 8003318:	fa09 f303 	lsl.w	r3, r9, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	9304      	str	r3, [sp, #16]
 8003320:	46a2      	mov	sl, r4
 8003322:	e7d2      	b.n	80032ca <_vfiprintf_r+0xc6>
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	1d19      	adds	r1, r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	9103      	str	r1, [sp, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	bfbb      	ittet	lt
 8003330:	425b      	neglt	r3, r3
 8003332:	f042 0202 	orrlt.w	r2, r2, #2
 8003336:	9307      	strge	r3, [sp, #28]
 8003338:	9307      	strlt	r3, [sp, #28]
 800333a:	bfb8      	it	lt
 800333c:	9204      	strlt	r2, [sp, #16]
 800333e:	7823      	ldrb	r3, [r4, #0]
 8003340:	2b2e      	cmp	r3, #46	@ 0x2e
 8003342:	d10a      	bne.n	800335a <_vfiprintf_r+0x156>
 8003344:	7863      	ldrb	r3, [r4, #1]
 8003346:	2b2a      	cmp	r3, #42	@ 0x2a
 8003348:	d132      	bne.n	80033b0 <_vfiprintf_r+0x1ac>
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	9203      	str	r2, [sp, #12]
 8003352:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003356:	3402      	adds	r4, #2
 8003358:	9305      	str	r3, [sp, #20]
 800335a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003430 <_vfiprintf_r+0x22c>
 800335e:	7821      	ldrb	r1, [r4, #0]
 8003360:	2203      	movs	r2, #3
 8003362:	4650      	mov	r0, sl
 8003364:	f7fc ff5c 	bl	8000220 <memchr>
 8003368:	b138      	cbz	r0, 800337a <_vfiprintf_r+0x176>
 800336a:	9b04      	ldr	r3, [sp, #16]
 800336c:	eba0 000a 	sub.w	r0, r0, sl
 8003370:	2240      	movs	r2, #64	@ 0x40
 8003372:	4082      	lsls	r2, r0
 8003374:	4313      	orrs	r3, r2
 8003376:	3401      	adds	r4, #1
 8003378:	9304      	str	r3, [sp, #16]
 800337a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800337e:	4829      	ldr	r0, [pc, #164]	@ (8003424 <_vfiprintf_r+0x220>)
 8003380:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003384:	2206      	movs	r2, #6
 8003386:	f7fc ff4b 	bl	8000220 <memchr>
 800338a:	2800      	cmp	r0, #0
 800338c:	d03f      	beq.n	800340e <_vfiprintf_r+0x20a>
 800338e:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <_vfiprintf_r+0x224>)
 8003390:	bb1b      	cbnz	r3, 80033da <_vfiprintf_r+0x1d6>
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	3307      	adds	r3, #7
 8003396:	f023 0307 	bic.w	r3, r3, #7
 800339a:	3308      	adds	r3, #8
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a0:	443b      	add	r3, r7
 80033a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80033a4:	e76a      	b.n	800327c <_vfiprintf_r+0x78>
 80033a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033aa:	460c      	mov	r4, r1
 80033ac:	2001      	movs	r0, #1
 80033ae:	e7a8      	b.n	8003302 <_vfiprintf_r+0xfe>
 80033b0:	2300      	movs	r3, #0
 80033b2:	3401      	adds	r4, #1
 80033b4:	9305      	str	r3, [sp, #20]
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 0c0a 	mov.w	ip, #10
 80033bc:	4620      	mov	r0, r4
 80033be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c2:	3a30      	subs	r2, #48	@ 0x30
 80033c4:	2a09      	cmp	r2, #9
 80033c6:	d903      	bls.n	80033d0 <_vfiprintf_r+0x1cc>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0c6      	beq.n	800335a <_vfiprintf_r+0x156>
 80033cc:	9105      	str	r1, [sp, #20]
 80033ce:	e7c4      	b.n	800335a <_vfiprintf_r+0x156>
 80033d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d4:	4604      	mov	r4, r0
 80033d6:	2301      	movs	r3, #1
 80033d8:	e7f0      	b.n	80033bc <_vfiprintf_r+0x1b8>
 80033da:	ab03      	add	r3, sp, #12
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	462a      	mov	r2, r5
 80033e0:	4b12      	ldr	r3, [pc, #72]	@ (800342c <_vfiprintf_r+0x228>)
 80033e2:	a904      	add	r1, sp, #16
 80033e4:	4630      	mov	r0, r6
 80033e6:	f3af 8000 	nop.w
 80033ea:	4607      	mov	r7, r0
 80033ec:	1c78      	adds	r0, r7, #1
 80033ee:	d1d6      	bne.n	800339e <_vfiprintf_r+0x19a>
 80033f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033f2:	07d9      	lsls	r1, r3, #31
 80033f4:	d405      	bmi.n	8003402 <_vfiprintf_r+0x1fe>
 80033f6:	89ab      	ldrh	r3, [r5, #12]
 80033f8:	059a      	lsls	r2, r3, #22
 80033fa:	d402      	bmi.n	8003402 <_vfiprintf_r+0x1fe>
 80033fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033fe:	f7ff fddd 	bl	8002fbc <__retarget_lock_release_recursive>
 8003402:	89ab      	ldrh	r3, [r5, #12]
 8003404:	065b      	lsls	r3, r3, #25
 8003406:	f53f af1f 	bmi.w	8003248 <_vfiprintf_r+0x44>
 800340a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800340c:	e71e      	b.n	800324c <_vfiprintf_r+0x48>
 800340e:	ab03      	add	r3, sp, #12
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	462a      	mov	r2, r5
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <_vfiprintf_r+0x228>)
 8003416:	a904      	add	r1, sp, #16
 8003418:	4630      	mov	r0, r6
 800341a:	f000 f879 	bl	8003510 <_printf_i>
 800341e:	e7e4      	b.n	80033ea <_vfiprintf_r+0x1e6>
 8003420:	08003b60 	.word	0x08003b60
 8003424:	08003b6a 	.word	0x08003b6a
 8003428:	00000000 	.word	0x00000000
 800342c:	080031df 	.word	0x080031df
 8003430:	08003b66 	.word	0x08003b66

08003434 <_printf_common>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	4616      	mov	r6, r2
 800343a:	4698      	mov	r8, r3
 800343c:	688a      	ldr	r2, [r1, #8]
 800343e:	690b      	ldr	r3, [r1, #16]
 8003440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003444:	4293      	cmp	r3, r2
 8003446:	bfb8      	it	lt
 8003448:	4613      	movlt	r3, r2
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003450:	4607      	mov	r7, r0
 8003452:	460c      	mov	r4, r1
 8003454:	b10a      	cbz	r2, 800345a <_printf_common+0x26>
 8003456:	3301      	adds	r3, #1
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0699      	lsls	r1, r3, #26
 800345e:	bf42      	ittt	mi
 8003460:	6833      	ldrmi	r3, [r6, #0]
 8003462:	3302      	addmi	r3, #2
 8003464:	6033      	strmi	r3, [r6, #0]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d106      	bne.n	800347c <_printf_common+0x48>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	6832      	ldr	r2, [r6, #0]
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	42ab      	cmp	r3, r5
 800347a:	dc26      	bgt.n	80034ca <_printf_common+0x96>
 800347c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003480:	6822      	ldr	r2, [r4, #0]
 8003482:	3b00      	subs	r3, #0
 8003484:	bf18      	it	ne
 8003486:	2301      	movne	r3, #1
 8003488:	0692      	lsls	r2, r2, #26
 800348a:	d42b      	bmi.n	80034e4 <_printf_common+0xb0>
 800348c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003490:	4641      	mov	r1, r8
 8003492:	4638      	mov	r0, r7
 8003494:	47c8      	blx	r9
 8003496:	3001      	adds	r0, #1
 8003498:	d01e      	beq.n	80034d8 <_printf_common+0xa4>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	6922      	ldr	r2, [r4, #16]
 800349e:	f003 0306 	and.w	r3, r3, #6
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf02      	ittt	eq
 80034a6:	68e5      	ldreq	r5, [r4, #12]
 80034a8:	6833      	ldreq	r3, [r6, #0]
 80034aa:	1aed      	subeq	r5, r5, r3
 80034ac:	68a3      	ldr	r3, [r4, #8]
 80034ae:	bf0c      	ite	eq
 80034b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b4:	2500      	movne	r5, #0
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bfc4      	itt	gt
 80034ba:	1a9b      	subgt	r3, r3, r2
 80034bc:	18ed      	addgt	r5, r5, r3
 80034be:	2600      	movs	r6, #0
 80034c0:	341a      	adds	r4, #26
 80034c2:	42b5      	cmp	r5, r6
 80034c4:	d11a      	bne.n	80034fc <_printf_common+0xc8>
 80034c6:	2000      	movs	r0, #0
 80034c8:	e008      	b.n	80034dc <_printf_common+0xa8>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4652      	mov	r2, sl
 80034ce:	4641      	mov	r1, r8
 80034d0:	4638      	mov	r0, r7
 80034d2:	47c8      	blx	r9
 80034d4:	3001      	adds	r0, #1
 80034d6:	d103      	bne.n	80034e0 <_printf_common+0xac>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e0:	3501      	adds	r5, #1
 80034e2:	e7c6      	b.n	8003472 <_printf_common+0x3e>
 80034e4:	18e1      	adds	r1, r4, r3
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	2030      	movs	r0, #48	@ 0x30
 80034ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034ee:	4422      	add	r2, r4
 80034f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034f8:	3302      	adds	r3, #2
 80034fa:	e7c7      	b.n	800348c <_printf_common+0x58>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4622      	mov	r2, r4
 8003500:	4641      	mov	r1, r8
 8003502:	4638      	mov	r0, r7
 8003504:	47c8      	blx	r9
 8003506:	3001      	adds	r0, #1
 8003508:	d0e6      	beq.n	80034d8 <_printf_common+0xa4>
 800350a:	3601      	adds	r6, #1
 800350c:	e7d9      	b.n	80034c2 <_printf_common+0x8e>
	...

08003510 <_printf_i>:
 8003510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	7e0f      	ldrb	r7, [r1, #24]
 8003516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003518:	2f78      	cmp	r7, #120	@ 0x78
 800351a:	4691      	mov	r9, r2
 800351c:	4680      	mov	r8, r0
 800351e:	460c      	mov	r4, r1
 8003520:	469a      	mov	sl, r3
 8003522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003526:	d807      	bhi.n	8003538 <_printf_i+0x28>
 8003528:	2f62      	cmp	r7, #98	@ 0x62
 800352a:	d80a      	bhi.n	8003542 <_printf_i+0x32>
 800352c:	2f00      	cmp	r7, #0
 800352e:	f000 80d2 	beq.w	80036d6 <_printf_i+0x1c6>
 8003532:	2f58      	cmp	r7, #88	@ 0x58
 8003534:	f000 80b9 	beq.w	80036aa <_printf_i+0x19a>
 8003538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800353c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003540:	e03a      	b.n	80035b8 <_printf_i+0xa8>
 8003542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003546:	2b15      	cmp	r3, #21
 8003548:	d8f6      	bhi.n	8003538 <_printf_i+0x28>
 800354a:	a101      	add	r1, pc, #4	@ (adr r1, 8003550 <_printf_i+0x40>)
 800354c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035bd 	.word	0x080035bd
 8003558:	08003539 	.word	0x08003539
 800355c:	08003539 	.word	0x08003539
 8003560:	08003539 	.word	0x08003539
 8003564:	08003539 	.word	0x08003539
 8003568:	080035bd 	.word	0x080035bd
 800356c:	08003539 	.word	0x08003539
 8003570:	08003539 	.word	0x08003539
 8003574:	08003539 	.word	0x08003539
 8003578:	08003539 	.word	0x08003539
 800357c:	080036bd 	.word	0x080036bd
 8003580:	080035e7 	.word	0x080035e7
 8003584:	08003677 	.word	0x08003677
 8003588:	08003539 	.word	0x08003539
 800358c:	08003539 	.word	0x08003539
 8003590:	080036df 	.word	0x080036df
 8003594:	08003539 	.word	0x08003539
 8003598:	080035e7 	.word	0x080035e7
 800359c:	08003539 	.word	0x08003539
 80035a0:	08003539 	.word	0x08003539
 80035a4:	0800367f 	.word	0x0800367f
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6032      	str	r2, [r6, #0]
 80035b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e09d      	b.n	80036f8 <_printf_i+0x1e8>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	1d19      	adds	r1, r3, #4
 80035c2:	6031      	str	r1, [r6, #0]
 80035c4:	0606      	lsls	r6, r0, #24
 80035c6:	d501      	bpl.n	80035cc <_printf_i+0xbc>
 80035c8:	681d      	ldr	r5, [r3, #0]
 80035ca:	e003      	b.n	80035d4 <_printf_i+0xc4>
 80035cc:	0645      	lsls	r5, r0, #25
 80035ce:	d5fb      	bpl.n	80035c8 <_printf_i+0xb8>
 80035d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	da03      	bge.n	80035e0 <_printf_i+0xd0>
 80035d8:	232d      	movs	r3, #45	@ 0x2d
 80035da:	426d      	negs	r5, r5
 80035dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e0:	4859      	ldr	r0, [pc, #356]	@ (8003748 <_printf_i+0x238>)
 80035e2:	230a      	movs	r3, #10
 80035e4:	e011      	b.n	800360a <_printf_i+0xfa>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	6833      	ldr	r3, [r6, #0]
 80035ea:	0608      	lsls	r0, r1, #24
 80035ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80035f0:	d402      	bmi.n	80035f8 <_printf_i+0xe8>
 80035f2:	0649      	lsls	r1, r1, #25
 80035f4:	bf48      	it	mi
 80035f6:	b2ad      	uxthmi	r5, r5
 80035f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80035fa:	4853      	ldr	r0, [pc, #332]	@ (8003748 <_printf_i+0x238>)
 80035fc:	6033      	str	r3, [r6, #0]
 80035fe:	bf14      	ite	ne
 8003600:	230a      	movne	r3, #10
 8003602:	2308      	moveq	r3, #8
 8003604:	2100      	movs	r1, #0
 8003606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800360a:	6866      	ldr	r6, [r4, #4]
 800360c:	60a6      	str	r6, [r4, #8]
 800360e:	2e00      	cmp	r6, #0
 8003610:	bfa2      	ittt	ge
 8003612:	6821      	ldrge	r1, [r4, #0]
 8003614:	f021 0104 	bicge.w	r1, r1, #4
 8003618:	6021      	strge	r1, [r4, #0]
 800361a:	b90d      	cbnz	r5, 8003620 <_printf_i+0x110>
 800361c:	2e00      	cmp	r6, #0
 800361e:	d04b      	beq.n	80036b8 <_printf_i+0x1a8>
 8003620:	4616      	mov	r6, r2
 8003622:	fbb5 f1f3 	udiv	r1, r5, r3
 8003626:	fb03 5711 	mls	r7, r3, r1, r5
 800362a:	5dc7      	ldrb	r7, [r0, r7]
 800362c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003630:	462f      	mov	r7, r5
 8003632:	42bb      	cmp	r3, r7
 8003634:	460d      	mov	r5, r1
 8003636:	d9f4      	bls.n	8003622 <_printf_i+0x112>
 8003638:	2b08      	cmp	r3, #8
 800363a:	d10b      	bne.n	8003654 <_printf_i+0x144>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	07df      	lsls	r7, r3, #31
 8003640:	d508      	bpl.n	8003654 <_printf_i+0x144>
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	6861      	ldr	r1, [r4, #4]
 8003646:	4299      	cmp	r1, r3
 8003648:	bfde      	ittt	le
 800364a:	2330      	movle	r3, #48	@ 0x30
 800364c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003654:	1b92      	subs	r2, r2, r6
 8003656:	6122      	str	r2, [r4, #16]
 8003658:	f8cd a000 	str.w	sl, [sp]
 800365c:	464b      	mov	r3, r9
 800365e:	aa03      	add	r2, sp, #12
 8003660:	4621      	mov	r1, r4
 8003662:	4640      	mov	r0, r8
 8003664:	f7ff fee6 	bl	8003434 <_printf_common>
 8003668:	3001      	adds	r0, #1
 800366a:	d14a      	bne.n	8003702 <_printf_i+0x1f2>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	b004      	add	sp, #16
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	f043 0320 	orr.w	r3, r3, #32
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	4833      	ldr	r0, [pc, #204]	@ (800374c <_printf_i+0x23c>)
 8003680:	2778      	movs	r7, #120	@ 0x78
 8003682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	6831      	ldr	r1, [r6, #0]
 800368a:	061f      	lsls	r7, r3, #24
 800368c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003690:	d402      	bmi.n	8003698 <_printf_i+0x188>
 8003692:	065f      	lsls	r7, r3, #25
 8003694:	bf48      	it	mi
 8003696:	b2ad      	uxthmi	r5, r5
 8003698:	6031      	str	r1, [r6, #0]
 800369a:	07d9      	lsls	r1, r3, #31
 800369c:	bf44      	itt	mi
 800369e:	f043 0320 	orrmi.w	r3, r3, #32
 80036a2:	6023      	strmi	r3, [r4, #0]
 80036a4:	b11d      	cbz	r5, 80036ae <_printf_i+0x19e>
 80036a6:	2310      	movs	r3, #16
 80036a8:	e7ac      	b.n	8003604 <_printf_i+0xf4>
 80036aa:	4827      	ldr	r0, [pc, #156]	@ (8003748 <_printf_i+0x238>)
 80036ac:	e7e9      	b.n	8003682 <_printf_i+0x172>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	f023 0320 	bic.w	r3, r3, #32
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	e7f6      	b.n	80036a6 <_printf_i+0x196>
 80036b8:	4616      	mov	r6, r2
 80036ba:	e7bd      	b.n	8003638 <_printf_i+0x128>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	6961      	ldr	r1, [r4, #20]
 80036c2:	1d18      	adds	r0, r3, #4
 80036c4:	6030      	str	r0, [r6, #0]
 80036c6:	062e      	lsls	r6, r5, #24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	d501      	bpl.n	80036d0 <_printf_i+0x1c0>
 80036cc:	6019      	str	r1, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <_printf_i+0x1c6>
 80036d0:	0668      	lsls	r0, r5, #25
 80036d2:	d5fb      	bpl.n	80036cc <_printf_i+0x1bc>
 80036d4:	8019      	strh	r1, [r3, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	4616      	mov	r6, r2
 80036dc:	e7bc      	b.n	8003658 <_printf_i+0x148>
 80036de:	6833      	ldr	r3, [r6, #0]
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	6032      	str	r2, [r6, #0]
 80036e4:	681e      	ldr	r6, [r3, #0]
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	2100      	movs	r1, #0
 80036ea:	4630      	mov	r0, r6
 80036ec:	f7fc fd98 	bl	8000220 <memchr>
 80036f0:	b108      	cbz	r0, 80036f6 <_printf_i+0x1e6>
 80036f2:	1b80      	subs	r0, r0, r6
 80036f4:	6060      	str	r0, [r4, #4]
 80036f6:	6863      	ldr	r3, [r4, #4]
 80036f8:	6123      	str	r3, [r4, #16]
 80036fa:	2300      	movs	r3, #0
 80036fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003700:	e7aa      	b.n	8003658 <_printf_i+0x148>
 8003702:	6923      	ldr	r3, [r4, #16]
 8003704:	4632      	mov	r2, r6
 8003706:	4649      	mov	r1, r9
 8003708:	4640      	mov	r0, r8
 800370a:	47d0      	blx	sl
 800370c:	3001      	adds	r0, #1
 800370e:	d0ad      	beq.n	800366c <_printf_i+0x15c>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	079b      	lsls	r3, r3, #30
 8003714:	d413      	bmi.n	800373e <_printf_i+0x22e>
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	4298      	cmp	r0, r3
 800371c:	bfb8      	it	lt
 800371e:	4618      	movlt	r0, r3
 8003720:	e7a6      	b.n	8003670 <_printf_i+0x160>
 8003722:	2301      	movs	r3, #1
 8003724:	4632      	mov	r2, r6
 8003726:	4649      	mov	r1, r9
 8003728:	4640      	mov	r0, r8
 800372a:	47d0      	blx	sl
 800372c:	3001      	adds	r0, #1
 800372e:	d09d      	beq.n	800366c <_printf_i+0x15c>
 8003730:	3501      	adds	r5, #1
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	9903      	ldr	r1, [sp, #12]
 8003736:	1a5b      	subs	r3, r3, r1
 8003738:	42ab      	cmp	r3, r5
 800373a:	dcf2      	bgt.n	8003722 <_printf_i+0x212>
 800373c:	e7eb      	b.n	8003716 <_printf_i+0x206>
 800373e:	2500      	movs	r5, #0
 8003740:	f104 0619 	add.w	r6, r4, #25
 8003744:	e7f5      	b.n	8003732 <_printf_i+0x222>
 8003746:	bf00      	nop
 8003748:	08003b71 	.word	0x08003b71
 800374c:	08003b82 	.word	0x08003b82

08003750 <__sflush_r>:
 8003750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	0716      	lsls	r6, r2, #28
 800375a:	4605      	mov	r5, r0
 800375c:	460c      	mov	r4, r1
 800375e:	d454      	bmi.n	800380a <__sflush_r+0xba>
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dc02      	bgt.n	800376c <__sflush_r+0x1c>
 8003766:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	dd48      	ble.n	80037fe <__sflush_r+0xae>
 800376c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800376e:	2e00      	cmp	r6, #0
 8003770:	d045      	beq.n	80037fe <__sflush_r+0xae>
 8003772:	2300      	movs	r3, #0
 8003774:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003778:	682f      	ldr	r7, [r5, #0]
 800377a:	6a21      	ldr	r1, [r4, #32]
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	d030      	beq.n	80037e2 <__sflush_r+0x92>
 8003780:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	0759      	lsls	r1, r3, #29
 8003786:	d505      	bpl.n	8003794 <__sflush_r+0x44>
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	1ad2      	subs	r2, r2, r3
 800378c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800378e:	b10b      	cbz	r3, 8003794 <__sflush_r+0x44>
 8003790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003792:	1ad2      	subs	r2, r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003798:	6a21      	ldr	r1, [r4, #32]
 800379a:	4628      	mov	r0, r5
 800379c:	47b0      	blx	r6
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	d106      	bne.n	80037b2 <__sflush_r+0x62>
 80037a4:	6829      	ldr	r1, [r5, #0]
 80037a6:	291d      	cmp	r1, #29
 80037a8:	d82b      	bhi.n	8003802 <__sflush_r+0xb2>
 80037aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003854 <__sflush_r+0x104>)
 80037ac:	410a      	asrs	r2, r1
 80037ae:	07d6      	lsls	r6, r2, #31
 80037b0:	d427      	bmi.n	8003802 <__sflush_r+0xb2>
 80037b2:	2200      	movs	r2, #0
 80037b4:	6062      	str	r2, [r4, #4]
 80037b6:	04d9      	lsls	r1, r3, #19
 80037b8:	6922      	ldr	r2, [r4, #16]
 80037ba:	6022      	str	r2, [r4, #0]
 80037bc:	d504      	bpl.n	80037c8 <__sflush_r+0x78>
 80037be:	1c42      	adds	r2, r0, #1
 80037c0:	d101      	bne.n	80037c6 <__sflush_r+0x76>
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	b903      	cbnz	r3, 80037c8 <__sflush_r+0x78>
 80037c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80037c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037ca:	602f      	str	r7, [r5, #0]
 80037cc:	b1b9      	cbz	r1, 80037fe <__sflush_r+0xae>
 80037ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d002      	beq.n	80037dc <__sflush_r+0x8c>
 80037d6:	4628      	mov	r0, r5
 80037d8:	f7ff fbf2 	bl	8002fc0 <_free_r>
 80037dc:	2300      	movs	r3, #0
 80037de:	6363      	str	r3, [r4, #52]	@ 0x34
 80037e0:	e00d      	b.n	80037fe <__sflush_r+0xae>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b0      	blx	r6
 80037e8:	4602      	mov	r2, r0
 80037ea:	1c50      	adds	r0, r2, #1
 80037ec:	d1c9      	bne.n	8003782 <__sflush_r+0x32>
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0c6      	beq.n	8003782 <__sflush_r+0x32>
 80037f4:	2b1d      	cmp	r3, #29
 80037f6:	d001      	beq.n	80037fc <__sflush_r+0xac>
 80037f8:	2b16      	cmp	r3, #22
 80037fa:	d11e      	bne.n	800383a <__sflush_r+0xea>
 80037fc:	602f      	str	r7, [r5, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	e022      	b.n	8003848 <__sflush_r+0xf8>
 8003802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003806:	b21b      	sxth	r3, r3
 8003808:	e01b      	b.n	8003842 <__sflush_r+0xf2>
 800380a:	690f      	ldr	r7, [r1, #16]
 800380c:	2f00      	cmp	r7, #0
 800380e:	d0f6      	beq.n	80037fe <__sflush_r+0xae>
 8003810:	0793      	lsls	r3, r2, #30
 8003812:	680e      	ldr	r6, [r1, #0]
 8003814:	bf08      	it	eq
 8003816:	694b      	ldreq	r3, [r1, #20]
 8003818:	600f      	str	r7, [r1, #0]
 800381a:	bf18      	it	ne
 800381c:	2300      	movne	r3, #0
 800381e:	eba6 0807 	sub.w	r8, r6, r7
 8003822:	608b      	str	r3, [r1, #8]
 8003824:	f1b8 0f00 	cmp.w	r8, #0
 8003828:	dde9      	ble.n	80037fe <__sflush_r+0xae>
 800382a:	6a21      	ldr	r1, [r4, #32]
 800382c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800382e:	4643      	mov	r3, r8
 8003830:	463a      	mov	r2, r7
 8003832:	4628      	mov	r0, r5
 8003834:	47b0      	blx	r6
 8003836:	2800      	cmp	r0, #0
 8003838:	dc08      	bgt.n	800384c <__sflush_r+0xfc>
 800383a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800383e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800384c:	4407      	add	r7, r0
 800384e:	eba8 0800 	sub.w	r8, r8, r0
 8003852:	e7e7      	b.n	8003824 <__sflush_r+0xd4>
 8003854:	dfbffffe 	.word	0xdfbffffe

08003858 <_fflush_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	690b      	ldr	r3, [r1, #16]
 800385c:	4605      	mov	r5, r0
 800385e:	460c      	mov	r4, r1
 8003860:	b913      	cbnz	r3, 8003868 <_fflush_r+0x10>
 8003862:	2500      	movs	r5, #0
 8003864:	4628      	mov	r0, r5
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	b118      	cbz	r0, 8003872 <_fflush_r+0x1a>
 800386a:	6a03      	ldr	r3, [r0, #32]
 800386c:	b90b      	cbnz	r3, 8003872 <_fflush_r+0x1a>
 800386e:	f7ff fa9f 	bl	8002db0 <__sinit>
 8003872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f3      	beq.n	8003862 <_fflush_r+0xa>
 800387a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800387c:	07d0      	lsls	r0, r2, #31
 800387e:	d404      	bmi.n	800388a <_fflush_r+0x32>
 8003880:	0599      	lsls	r1, r3, #22
 8003882:	d402      	bmi.n	800388a <_fflush_r+0x32>
 8003884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003886:	f7ff fb98 	bl	8002fba <__retarget_lock_acquire_recursive>
 800388a:	4628      	mov	r0, r5
 800388c:	4621      	mov	r1, r4
 800388e:	f7ff ff5f 	bl	8003750 <__sflush_r>
 8003892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003894:	07da      	lsls	r2, r3, #31
 8003896:	4605      	mov	r5, r0
 8003898:	d4e4      	bmi.n	8003864 <_fflush_r+0xc>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	059b      	lsls	r3, r3, #22
 800389e:	d4e1      	bmi.n	8003864 <_fflush_r+0xc>
 80038a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038a2:	f7ff fb8b 	bl	8002fbc <__retarget_lock_release_recursive>
 80038a6:	e7dd      	b.n	8003864 <_fflush_r+0xc>

080038a8 <__swbuf_r>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	460e      	mov	r6, r1
 80038ac:	4614      	mov	r4, r2
 80038ae:	4605      	mov	r5, r0
 80038b0:	b118      	cbz	r0, 80038ba <__swbuf_r+0x12>
 80038b2:	6a03      	ldr	r3, [r0, #32]
 80038b4:	b90b      	cbnz	r3, 80038ba <__swbuf_r+0x12>
 80038b6:	f7ff fa7b 	bl	8002db0 <__sinit>
 80038ba:	69a3      	ldr	r3, [r4, #24]
 80038bc:	60a3      	str	r3, [r4, #8]
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	071a      	lsls	r2, r3, #28
 80038c2:	d501      	bpl.n	80038c8 <__swbuf_r+0x20>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	b943      	cbnz	r3, 80038da <__swbuf_r+0x32>
 80038c8:	4621      	mov	r1, r4
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 f82a 	bl	8003924 <__swsetup_r>
 80038d0:	b118      	cbz	r0, 80038da <__swbuf_r+0x32>
 80038d2:	f04f 37ff 	mov.w	r7, #4294967295
 80038d6:	4638      	mov	r0, r7
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	6922      	ldr	r2, [r4, #16]
 80038de:	1a98      	subs	r0, r3, r2
 80038e0:	6963      	ldr	r3, [r4, #20]
 80038e2:	b2f6      	uxtb	r6, r6
 80038e4:	4283      	cmp	r3, r0
 80038e6:	4637      	mov	r7, r6
 80038e8:	dc05      	bgt.n	80038f6 <__swbuf_r+0x4e>
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f7ff ffb3 	bl	8003858 <_fflush_r>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d1ed      	bne.n	80038d2 <__swbuf_r+0x2a>
 80038f6:	68a3      	ldr	r3, [r4, #8]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60a3      	str	r3, [r4, #8]
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	6022      	str	r2, [r4, #0]
 8003902:	701e      	strb	r6, [r3, #0]
 8003904:	6962      	ldr	r2, [r4, #20]
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	429a      	cmp	r2, r3
 800390a:	d004      	beq.n	8003916 <__swbuf_r+0x6e>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d5e1      	bpl.n	80038d6 <__swbuf_r+0x2e>
 8003912:	2e0a      	cmp	r6, #10
 8003914:	d1df      	bne.n	80038d6 <__swbuf_r+0x2e>
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f7ff ff9d 	bl	8003858 <_fflush_r>
 800391e:	2800      	cmp	r0, #0
 8003920:	d0d9      	beq.n	80038d6 <__swbuf_r+0x2e>
 8003922:	e7d6      	b.n	80038d2 <__swbuf_r+0x2a>

08003924 <__swsetup_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4b29      	ldr	r3, [pc, #164]	@ (80039cc <__swsetup_r+0xa8>)
 8003928:	4605      	mov	r5, r0
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	460c      	mov	r4, r1
 800392e:	b118      	cbz	r0, 8003938 <__swsetup_r+0x14>
 8003930:	6a03      	ldr	r3, [r0, #32]
 8003932:	b90b      	cbnz	r3, 8003938 <__swsetup_r+0x14>
 8003934:	f7ff fa3c 	bl	8002db0 <__sinit>
 8003938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800393c:	0719      	lsls	r1, r3, #28
 800393e:	d422      	bmi.n	8003986 <__swsetup_r+0x62>
 8003940:	06da      	lsls	r2, r3, #27
 8003942:	d407      	bmi.n	8003954 <__swsetup_r+0x30>
 8003944:	2209      	movs	r2, #9
 8003946:	602a      	str	r2, [r5, #0]
 8003948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	f04f 30ff 	mov.w	r0, #4294967295
 8003952:	e033      	b.n	80039bc <__swsetup_r+0x98>
 8003954:	0758      	lsls	r0, r3, #29
 8003956:	d512      	bpl.n	800397e <__swsetup_r+0x5a>
 8003958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800395a:	b141      	cbz	r1, 800396e <__swsetup_r+0x4a>
 800395c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003960:	4299      	cmp	r1, r3
 8003962:	d002      	beq.n	800396a <__swsetup_r+0x46>
 8003964:	4628      	mov	r0, r5
 8003966:	f7ff fb2b 	bl	8002fc0 <_free_r>
 800396a:	2300      	movs	r3, #0
 800396c:	6363      	str	r3, [r4, #52]	@ 0x34
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003974:	81a3      	strh	r3, [r4, #12]
 8003976:	2300      	movs	r3, #0
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	b94b      	cbnz	r3, 800399e <__swsetup_r+0x7a>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003994:	d003      	beq.n	800399e <__swsetup_r+0x7a>
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f84f 	bl	8003a3c <__smakebuf_r>
 800399e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a2:	f013 0201 	ands.w	r2, r3, #1
 80039a6:	d00a      	beq.n	80039be <__swsetup_r+0x9a>
 80039a8:	2200      	movs	r2, #0
 80039aa:	60a2      	str	r2, [r4, #8]
 80039ac:	6962      	ldr	r2, [r4, #20]
 80039ae:	4252      	negs	r2, r2
 80039b0:	61a2      	str	r2, [r4, #24]
 80039b2:	6922      	ldr	r2, [r4, #16]
 80039b4:	b942      	cbnz	r2, 80039c8 <__swsetup_r+0xa4>
 80039b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039ba:	d1c5      	bne.n	8003948 <__swsetup_r+0x24>
 80039bc:	bd38      	pop	{r3, r4, r5, pc}
 80039be:	0799      	lsls	r1, r3, #30
 80039c0:	bf58      	it	pl
 80039c2:	6962      	ldrpl	r2, [r4, #20]
 80039c4:	60a2      	str	r2, [r4, #8]
 80039c6:	e7f4      	b.n	80039b2 <__swsetup_r+0x8e>
 80039c8:	2000      	movs	r0, #0
 80039ca:	e7f7      	b.n	80039bc <__swsetup_r+0x98>
 80039cc:	2000002c 	.word	0x2000002c

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4d06      	ldr	r5, [pc, #24]	@ (80039ec <_sbrk_r+0x1c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fc ffbc 	bl	8000958 <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000290 	.word	0x20000290

080039f0 <__swhatbuf_r>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	460c      	mov	r4, r1
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	2900      	cmp	r1, #0
 80039fa:	b096      	sub	sp, #88	@ 0x58
 80039fc:	4615      	mov	r5, r2
 80039fe:	461e      	mov	r6, r3
 8003a00:	da0d      	bge.n	8003a1e <__swhatbuf_r+0x2e>
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2340      	movne	r3, #64	@ 0x40
 8003a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a14:	2000      	movs	r0, #0
 8003a16:	6031      	str	r1, [r6, #0]
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	b016      	add	sp, #88	@ 0x58
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
 8003a1e:	466a      	mov	r2, sp
 8003a20:	f000 f848 	bl	8003ab4 <_fstat_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	dbec      	blt.n	8003a02 <__swhatbuf_r+0x12>
 8003a28:	9901      	ldr	r1, [sp, #4]
 8003a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a32:	4259      	negs	r1, r3
 8003a34:	4159      	adcs	r1, r3
 8003a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a3a:	e7eb      	b.n	8003a14 <__swhatbuf_r+0x24>

08003a3c <__smakebuf_r>:
 8003a3c:	898b      	ldrh	r3, [r1, #12]
 8003a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a40:	079d      	lsls	r5, r3, #30
 8003a42:	4606      	mov	r6, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	d507      	bpl.n	8003a58 <__smakebuf_r+0x1c>
 8003a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	2301      	movs	r3, #1
 8003a52:	6163      	str	r3, [r4, #20]
 8003a54:	b003      	add	sp, #12
 8003a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a58:	ab01      	add	r3, sp, #4
 8003a5a:	466a      	mov	r2, sp
 8003a5c:	f7ff ffc8 	bl	80039f0 <__swhatbuf_r>
 8003a60:	9f00      	ldr	r7, [sp, #0]
 8003a62:	4605      	mov	r5, r0
 8003a64:	4639      	mov	r1, r7
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff fb16 	bl	8003098 <_malloc_r>
 8003a6c:	b948      	cbnz	r0, 8003a82 <__smakebuf_r+0x46>
 8003a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a72:	059a      	lsls	r2, r3, #22
 8003a74:	d4ee      	bmi.n	8003a54 <__smakebuf_r+0x18>
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	81a3      	strh	r3, [r4, #12]
 8003a80:	e7e2      	b.n	8003a48 <__smakebuf_r+0xc>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	6020      	str	r0, [r4, #0]
 8003a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	9b01      	ldr	r3, [sp, #4]
 8003a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a92:	b15b      	cbz	r3, 8003aac <__smakebuf_r+0x70>
 8003a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 f81d 	bl	8003ad8 <_isatty_r>
 8003a9e:	b128      	cbz	r0, 8003aac <__smakebuf_r+0x70>
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	81a3      	strh	r3, [r4, #12]
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	431d      	orrs	r5, r3
 8003ab0:	81a5      	strh	r5, [r4, #12]
 8003ab2:	e7cf      	b.n	8003a54 <__smakebuf_r+0x18>

08003ab4 <_fstat_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d07      	ldr	r5, [pc, #28]	@ (8003ad4 <_fstat_r+0x20>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	f7fc ff20 	bl	8000906 <_fstat>
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d102      	bne.n	8003ad0 <_fstat_r+0x1c>
 8003aca:	682b      	ldr	r3, [r5, #0]
 8003acc:	b103      	cbz	r3, 8003ad0 <_fstat_r+0x1c>
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000290 	.word	0x20000290

08003ad8 <_isatty_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_isatty_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fc ff1f 	bl	8000926 <_isatty>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_isatty_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_isatty_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000290 	.word	0x20000290

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
